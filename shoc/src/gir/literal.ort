
type GIRLiteral is packed
	GIRInstType _gir_ty
	OType  type_
	GIRVar out_var
	bool   is_null_literal
	long   integer_value
	cstr   string_value
	cstr   printable_string_value
	float  float_value

	function(GIRLiteral self) GIRLiteral::print -> void does
		printf("literal \t%s \t", self.type_.name)
		if self.is_null_literal do
			printf("<null literal>")
		elif self.type_.variety==S_INT do
			printf("%ld", self.integer_value)
		elif self.type_.variety==U_INT do
			printf("%lu", self.integer_value)
		elif self.type_.variety==FLOAT do
			printf("%f",  self.float_value)
		elif self.type_.name=="cstr" do
			printf("'%s'", self.printable_string_value)
		else do
			shoc::bail_out("Don't know how to do a literal for type '"+self.type_.name+"' in GIRLiteral")
		done
		printf(" => %s\n", self.out_var:str())
	return

	function(Project p) GIRLiteral::emit_null -> GIRVar does
		GIRLiteral new = GIRInst::create(p, "literal", @sizeof(GIRLiteral)@)|GIRLiteral
		new.type_=p:get_type("ptr")
		new.is_null_literal=true
		new.out_var=GIRVar::new(p, new.type_):set_memo("Null ptr literal")
		p:emit_gir(new|GIRInst)
	return new.out_var

	function(Project p, long value) GIRLiteral::emit_int -> GIRVar does
		GIRLiteral new = GIRInst::create(p, "literal", @sizeof(GIRLiteral)@)|GIRLiteral
		new.type_=p:get_type("int")
		new.integer_value=value
		new.out_var=GIRVar::new(p, new.type_):set_memo("Integer literal")
		p:emit_gir(new|GIRInst)
	return new.out_var

	function(Project p, long value) GIRLiteral::emit_long -> GIRVar does
		GIRLiteral new = GIRInst::create(p, "literal", @sizeof(GIRLiteral)@)|GIRLiteral
		new.type_=p:get_type("long")
		new.integer_value=value
		new.out_var=GIRVar::new(p, new.type_):set_memo("Integer literal")
		p:emit_gir(new|GIRInst)
	return new.out_var

	function(Project p, bool value) GIRLiteral::emit_bool -> GIRVar does
		GIRLiteral new = GIRInst::create(p, "literal", @sizeof(GIRLiteral)@)|GIRLiteral
		new.type_=p:get_type("bool")
		new.integer_value=value|long
		new.out_var=GIRVar::new(p, new.type_):set_memo("Boolean literal")
		p:emit_gir(new|GIRInst)
	return new.out_var

	function(Project p, float value) GIRLiteral::emit_float -> GIRVar does
		GIRLiteral new = GIRInst::create(p, "literal", @sizeof(GIRLiteral)@)|GIRLiteral
		new.type_=p:get_type("float")
		new.float_value=value
		new.out_var=GIRVar::new(p, new.type_):set_memo("Float literal")
		p:emit_gir(new|GIRInst)
	return new.out_var

	function(Project p, cstr value) GIRLiteral::emit_cstr -> GIRVar does
		GIRLiteral new = GIRInst::create(p, "literal", @sizeof(GIRLiteral)@)|GIRLiteral
		new.type_=p:get_type("cstr")
		new.string_value=shoc::parse_string_literal(value)
		new.printable_string_value=value
		new.out_var=GIRVar::new(p, new.type_):set_memo("String literal")
		p:emit_gir(new|GIRInst)
	return new.out_var

	function(GIRLiteral self) GIRLiteral::get_used -> List does
	return List::new():with_GIRVar(self.out_var)

	function() GIRLiteral::impl -> GIRInstType does
	return GIRInstType::new("literal"):set_printer(GIRLiteral::print|GIRInstPrinter):set_getter(GIRLiteral::get_used|GIRUseGetter)
endtype