import std
import shoc
import args
import err

function(int nargs, ArgList args) main -> int does
    orth::install_sigsev_handler()
    StrMap options = StrMap::new()
    # options:set("no_pad_struct", "1")
	Project proj = shoc::get_empty_project()\
	                    :with_options(options)\
	                    :with_base_tokens()\
	                    :with_base_grammar()\
	                    :with_base_passes()\
	                    :with_base_gir()\
	                    :with_arch_bits(64)\
	                    :with_base_types()\
	                    :with_search_path(List::new())

    # int i=0
    # while i<proj.node_types.len do
    #     NodeType n = proj.node_types:get(i)|NodeType
    #     if n.copier|ptr == _default_node_copier|ptr do
    #         printf("Missing Copier: %s\n", n.name)
    #     done
    #     i+=1
    # done


    File fd = File::open("../nontrivial.ort", "r")
    cstr contents = fd:readall()+"\n"
    fd:close()

    List tokens = proj:tokenize(contents, "nontrivial.ort", false)
    Node node   = proj:parse(tokens, contents, false)
    node:print_root()
    node:copy():print_root()

    # List fields = List::new()
    # fields:append_TypedVar(TypedVar::new("value", SymType::new("V")))

    # GenericArgs generic_args = GenericArgs::new()
    # generic_args:add_null("V")

    # GType generic_type = GType::new(proj, "Cell", fields, true, generic_args)
    # GenericArgs next_args = GenericArgs::copy(generic_args)
    # next_args:set("V", SymType::new("V"))
    # OType pt = PType::new(generic_type, next_args)
    # generic_type.fields:append_TypedVar(TypedVar::new("next", pt))
    # generic_type:print()
    # printf("\n\n\n")

    # GenericArgs inst_args = GenericArgs::copy(generic_args)
    # inst_args:set("V", proj:get_type("int"))

    # PType::new(generic_type, inst_args):resolve(GenericArgs::new()):print()
return 0