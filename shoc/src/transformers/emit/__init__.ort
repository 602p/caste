import "transformers/emit/containers.ort"
import "transformers/emit/literals.ort"
import "transformers/emit/assign.ort"
import "transformers/emit/return.ort"
import "transformers/emit/name.ort"
import "transformers/emit/binop.ort"
import "transformers/emit/cast.ort"
import "transformers/emit/call.ort"
import "transformers/emit/if.ort"
import "transformers/emit/while.ort"
import "transformers/emit/accessor.ort"
import "transformers/emit/instrinsic.ort"
import "transformers/emit/index.ort"
import "transformers/emit/unop.ort"
import gir

function(Node n, TransformerPass p) emit_value::noop -> cstr does
return "<noop>"

function() emit_value::init -> TransformerPass does
return TransformerPass::new("emit_value"):no_auto_visit()\
       :add_specialization("FileNode",       emit_value::for_file       |NodeTransformer)\
       :add_specialization("FunctionDecl",   emit_value::for_func       |NodeTransformer)\
       :add_specialization("BlockBody",      emit_value::for_blockbody  |NodeTransformer)\
       :add_specialization("LiteralExpr",    emit_value::for_literal    |NodeTransformer)\
       :add_specialization("AssignmentExpr", emit_value::for_assignment |NodeTransformer)\
       :add_specialization("ReturnExpr",     emit_value::for_return     |NodeTransformer)\
       :add_specialization("NameExpr",       emit_value::for_name       |NodeTransformer)\
	   :add_specialization("DeclExpr",       emit_value::for_decl       |NodeTransformer)\
	   :add_specialization("BinOpExpr",      emit_value::for_binop      |NodeTransformer)\
	   :add_specialization("CastExpr",       emit_value::for_cast       |NodeTransformer)\
	   :add_specialization("CallExpr",       emit_value::for_call       |NodeTransformer)\
	   :add_specialization("TypeDeclHead",   emit_value::noop           |NodeTransformer)\
	   :add_specialization("SepExpr",        emit_value::noop           |NodeTransformer)\
	   :add_specialization("TypeDecl",       emit_value::for_typedecl   |NodeTransformer)\
	   :add_specialization("IfExpr",         emit_value::for_if         |NodeTransformer)\
	   :add_specialization("WhileExpr",      emit_value::for_while      |NodeTransformer)\
	   :add_specialization("AccessorExpr",   emit_value::for_accessor   |NodeTransformer)\
	   :add_specialization("IntrinsicExpr",  emit_value::for_intrinsic  |NodeTransformer)\
	   :add_specialization("IndexExpr",      emit_value::for_index      |NodeTransformer)\
	   :add_specialization("UnOpExpr",       emit_value::for_unop       |NodeTransformer)
	   
function() emit_addr::init -> TransformerPass does
return TransformerPass::new("emit_addr"):no_auto_visit():no_default_run()\
		:add_specialization("NameExpr",      emit_addr::for_name        |NodeTransformer)\
		:add_specialization("DeclExpr",      emit_addr::for_decl        |NodeTransformer)\
		:add_specialization("AccessorExpr",  emit_addr::for_accessor    |NodeTransformer)\
		:add_specialization("IndexExpr",     emit_addr::for_index       |NodeTransformer)

function(TransformerPass p, Node n) TransformerPass:emit_value -> GIRVar does
	shoc::assert(p.proj:get_transformer_pass("emit_value")\
		.visitor_map:contains(n.type_.name), "Unable to emit value for type "+n.type_.name)
return p.proj:get_transformer_pass("emit_value"):visit_GIRVar(n)

function(TransformerPass p, Node n) TransformerPass:emit_addr -> GIRVar does
	shoc::assert(p.proj:get_transformer_pass("emit_addr")\
		.visitor_map:contains(n.type_.name), "Unable to emit address for type "+n.type_.name)
return p.proj:get_transformer_pass("emit_addr"):visit_GIRVar(n)