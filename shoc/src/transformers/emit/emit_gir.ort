import "transformers/emit/containers.ort"
import "transformers/emit/literals.ort"
import "transformers/emit/assign.ort"
import "transformers/emit/return.ort"
import "transformers/emit/name.ort"
import "transformers/emit/binop.ort"
import gir

function() emit_value::init -> TransformerPass does
return TransformerPass::new("emit_value"):no_auto_visit()\
       :add_specialization("FileNode", emit_value::for_file|NodeTransformer)\
       :add_specialization("FunctionDecl", emit_value::for_func|NodeTransformer)\
       :add_specialization("LiteralExpr", emit_value::for_literal|NodeTransformer)\
       :add_specialization("AssignmentExpr", emit_value::for_assignment|NodeTransformer)\
       :add_specialization("ReturnExpr", emit_value::for_return|NodeTransformer)\
       :add_specialization("NameExpr", emit_value::for_name|NodeTransformer)\
	   :add_specialization("DeclExpr", emit_value::for_decl|NodeTransformer)\
	   :add_specialization("BinOpExpr", emit_value::for_binop|NodeTransformer)

function(TransformerPass p, Node n) TransformerPass:emit_value -> GIRVar does
	shoc::assert(p.proj:get_transformer_pass("emit_value")\
		.visitor_map:contains(n.type_.name), "Unable to emit value for type "+n.type_.name)
return p.proj:get_transformer_pass("emit_value"):visit_GIRVar(n)

function() emit_addr::init -> TransformerPass does
return TransformerPass::new("emit_addr"):no_auto_visit():no_default_run()\
		:add_specialization("NameExpr", emit_addr::for_name|NodeTransformer)\
		:add_specialization("DeclExpr", emit_addr::for_decl|NodeTransformer)

function(TransformerPass p, Node n) TransformerPass:emit_addr -> GIRVar does
	shoc::assert(p.proj:get_transformer_pass("emit_addr")\
		.visitor_map:contains(n.type_.name), "Unable to emit address for type "+n.type_.name)
return p.proj:get_transformer_pass("emit_addr"):visit_GIRVar(n)
