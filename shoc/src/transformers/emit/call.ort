
function(CallExpr n, TransformerPass p) emit_value::for_call -> GIRVar does
	List args=List::new()
	
	OType meth_type_raw = p.proj:get_node_type(n.meth)
	p.proj:fail_in_if(-meth_type_raw:is_fptr(), "Must call a function or function pointer", n.meth)
	FPtrOType meth_type = meth_type_raw|FPtrOType
	bool do_checking = meth_type.args|ptr!=null

	if do_checking do
		p.proj:fail_in_if(meth_type.args.len!=n.args.len, "Wrong number of arguments", n|Node)
	done

	Node arg
	int i=0
	while i<n.args.len do
		arg=n.args:get_Node(i)
		if do_checking do
			OType arg_t = p.proj:get_node_type(arg)
			OType req_t = meth_type.args:get_OType(i)
			if arg_t!=req_t do
				bool warn = true
				if (arg_t.name=="cstr" & req_t.name=="ptr"):or(arg_t.name=="ptr" & req_t.name=="cstr") do
					warn = p.proj.options:contains("warn_strict_types")
				done
				if warn do
					p.proj:cond_warn_in("warn_types", "Invalid type of arg. Is: "+arg_t.name+", should be "+meth_type.args:get_OType(i).name, arg)
				done
			done
		done
		args:append_GIRVar(p:emit_value(arg))
		i+=1
	done
	GIRVar res = GIRCall::emit(p.proj, p:emit_value(n.meth), args)
	
	if p.proj.options:contains("xfunchooks") do
		List hook_args=List::new()
		hook_args:append_GIRVar(GIRLiteral::emit_cstr(p.proj, p.proj.curr_method.name))
		GIRCall::emit(p.proj, GIRGetMethod::emit(p.proj, p.proj:get_Method("orth$$internal$$hooks$$function_reenter_hook")), hook_args)
	done
return res