
function(NameExpr n, TransformerPass p) emit_addr::for_name -> GIRVar does
	p.proj:fail_in_if(p.proj.curr_method|ptr==null, "Can't resolve name "+n.name+" (outside of func)", n|Node)
	if p.proj.curr_method:has_local(n.name) do
		return GIRGetLocal::emit(p.proj, p.proj.curr_method:get_local(n.name), n.name)
	elif p.proj.globals:contains(n.name) do
		return GIRGetGlobal::emit(p.proj, (p.proj.globals:get(n.name)|TypedVar).type_, n.name)
	done
	p.proj:fail_in("Can't resolve name "+n.name+" (used as addr)", n|Node)
return null|GIRVar

function(NameExpr n, TransformerPass p) emit_value::for_name -> GIRVar does
	p.proj:fail_in_if(p.proj.curr_method|ptr==null, "Can't resolve name "+n.name+" (outside of func)", n|Node)
	if p.proj.curr_method.locals:contains(n.name):or(p.proj.globals:contains(n.name)) do
		return GIRLoad::emit(p.proj, p:emit_addr(n|Node))
	elif p.proj.methods:contains(n.name) do
		return GIRGetMethod::emit(p.proj, p.proj:get_Method(n.name))
	done
	p.proj:fail_in("Can't resolve name "+n.name+" (used as value)", n|Node)
return null|GIRVar

function(DeclExpr n, TransformerPass p) emit_addr::for_decl -> GIRVar does
	cstr name = TypedVar::from_decl(n.name, p.proj).name
return GIRGetLocal::emit(p.proj, p.proj.curr_method:get_local(name), name)

function(DeclExpr n, TransformerPass p) emit_value::for_decl -> GIRVar does
return GIRLoad::emit(p.proj, p:emit_addr(n|Node))