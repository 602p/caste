
function(FunctionDecl n, TransformerPass p) define_syms::visit_func -> FunctionDecl does
	# printf("Visit func\n")
	# puts(n.head:get_strname())
	shoc::assert(-p.proj.methods:contains(n.head:get_strname()), "Duplicate definition of method "+n.head:get_strname())
	shoc::assert(p.proj.types:contains(n.head.ret_type), "Declaring method "+n.head:get_strname()+" with unknown rtype "+n.head.ret_type)
	# printf("defining method: %s\n", n.head:get_strname())
	p.proj:add_Method(Method::new(p.proj, n.head:get_strname(), n.head.args, n.head.varargs, n.head.ret_type, n.head.is_extern))
	# puts("OK")
return n

function(FileNode n, TransformerPass p) define_syms::visit_file -> FileNode does
	# printf("Visit file\n")
	int i=0
	cstr name
	TypedVar v
	AssignmentExpr ex
	while i<n.statements.len do
		if n.statements:get_Node(i):is_a("DeclExpr") do
			v=TypedVar::new(n.statements:get_Node(i)|DeclExpr.d_name, p.proj:resolve_TypeName(n.statements:get_Node(i)|DeclExpr.d_type))
			shoc::assert(-p.proj.globals:contains(v.name), "Duplicate definition of global "+v.name)
			p.proj:add_Global(v, "0")
		elif n.statements:get_Node(i):is_a("AssignmentExpr") do
			ex=n.statements:get_Node(i)|AssignmentExpr
			v=ex.lhs|DeclExpr:make_TypedVar(p.proj)
			shoc::assert(-p.proj.globals:contains(v.name), "Duplicate definition of global "+v.name)
			shoc::assert(v.type_:is_primitive(), "Global "+v.name+" must be primitive if statically initilized")
			shoc::assert(ex.rhs:is_a("LiteralExpr"), "Global "+v.name+" must be statically initilized by a literal")
			p.proj:add_Global(v, ex.rhs|LiteralExpr.value)
		done
		i+=1
	done
return n

function() define_syms::init -> TransformerPass does
return TransformerPass::new("define_syms")\
       :add_specialization("FunctionDecl", define_syms::visit_func|NodeTransformer)\
       :add_specialization("FileNode", define_syms::visit_file|NodeTransformer)