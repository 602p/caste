
function(TypeDecl n, TransformerPass p) define_types::visit_type -> TypeDecl does
	int i=0
	Node st
	while i<n.body.statements.len do
		st=n.body.statements:get_Node(i)
		if st:is_a("DeclExpr") do
			if -n.head.is_generic do
				(p.proj:get_type(n.head:nongeneric_name())|StructOType):add_field((st|DeclExpr):make_TypedVar(p.proj))
			else do
				p.proj.generic_types:get(n.head.name|GenericName.base_name)|GType.fields:append_TypedVar(\
					TypedVar::new(st|DeclExpr.d_name,\
						generic::resolve_symdecl(p.proj, st|DeclExpr.d_type,\
							p.proj.generic_types:get(n.head.name|GenericName.base_name)|GType.arguments)))
			done
		done
		i+=1
	done
	if n.head.is_generic do
		#kill it since it isn't real
		List statements = List::new()
		i=0
		while i<n.body.statements.len do
			if n.body.statements:get_Node(i):is_a("FunctionDecl") do
				statements:append_Node(n.body.statements:get_Node(i))
			done
			i+=1
		done
		return BlockBody::create_direct(statements)|TypeDecl
	done
return n

function(TypeDeclHead n, TransformerPass p) define_types::visit_alias -> TypeDeclHead does
	if n.is_func_alias do
		shoc::assert(-p.proj.types:contains(n:nongeneric_name()), "Duplicate definition of type "+n:nongeneric_name())
		if -p.proj.types:contains(n.alias_type) do
			shoc::bail_out("No such type "+n.alias_type+" for RT of FPtr in define_types::visit_alias, atype="+n:nongeneric_name())
		done
		p.proj:add_Type(FPtrOType::new_varargs(n:nongeneric_name(), p.proj:get_type(n.alias_type)))
	done
	#TODO: Implement
return n

function() define_types::init -> TransformerPass does
return TransformerPass::new("define_types")\
       :add_specialization("TypeDecl", define_types::visit_type|NodeTransformer)\
       :add_specialization("TypeDeclHead", define_types::visit_alias|NodeTransformer)