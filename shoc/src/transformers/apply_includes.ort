import searchpath

function(ImportStmt n, TransformerPass p) apply_includes::visit_import -> Node does
	cstr path
	if n.name:contains("\x22") do
		int start=n.name:find("\x22")
		int end=n.name:offset(start+1):find("\x22")
		path=shoc::resolve_absolute_import(n.name:substr(start+1, end))
	else do
		List search_path = List::new()
		search_path:append(".")
		path=shoc::resolve_name_import(search_path, n.name:substr(n.name:find(" ")+1,n.name:len()-(n.name:find(" ")+1)))
	done

	int i=0
	while i<p.proj.included_files.len do
		if (p.proj.included_files:get(i)|cstr)==path do
			return null|Node
		done
		i+=1
	done
	
	p.proj.included_files:append(path)

	File fd = File::open(path, "r")

	cstr text = fd:readall()

	fd:close()
return p.proj:process_text(text)

function() apply_includes::init -> TransformerPass does
return TransformerPass::new("apply_includes")\
       :add_specialization("ImportStmt", apply_includes::visit_import|NodeTransformer)