
function(AccessorExpr n, TransformerPass p) rewrite_namespaces::visit_accessor -> AccessorExpr does
	if n.mode=="::" do
		if n.object:is_a("NameExpr") do
			return generic::merge_generic_accessor(n|NameExpr, p.proj:get_node_anchor(n|Node))|AccessorExpr
		done
	done
return n

function(FunctionDecl n, TransformerPass p) rewrite_namespaces::visit_func -> FunctionDecl does
	if n.head.name|Node:is_a("AccessorExpr") do
		n.head.name = generic::merge_generic_accessor(n.head.name, n.head.anchor)
	done
return n

function(NameExpr maybe_acc, Token anchor) generic::merge_generic_accessor -> NameExpr does
	if maybe_acc.type_==NameExpr_t do
		return maybe_acc
	done

	AccessorExpr name = maybe_acc|AccessorExpr
	cstr lhs_name
	cstr rhs_name
	List generic_params = List::new()
	int i


	cstr sep
	if name.mode==":" do
		sep="$"
	else do
		sep="$$"
	done


	if name.object|Node:is_a("GenericName") do
		lhs_name=name.object|GenericName.base_name
		i=0
		while i<name.object|GenericName.args.len do
			generic_params:append(name.object|GenericName.args:get(i))
			i+=1
		done
	else do
		lhs_name=generic::merge_generic_accessor(name.object|NameExpr, anchor).name
	done


	if name.field|Node:is_a("GenericName") do
		rhs_name=name.field|GenericName.base_name
		i=0
		while i<name.field|GenericName.args.len do
			generic_params:append(name.field|GenericName.args:get(i))
			i+=1
		done
	else do
		rhs_name=generic::merge_generic_accessor(name.field|NameExpr, anchor).name
	done


	if generic_params.len > 0 do
		return GenericName::create_direct(lhs_name+sep+rhs_name, generic_params, anchor)|NameExpr
	done
return NameExpr::create_direct(lhs_name+sep+rhs_name, anchor)

function() rewrite_namespaces::init -> TransformerPass does
return TransformerPass::new("rewrite_namespaces")\
       :add_specialization("AccessorExpr", rewrite_namespaces::visit_accessor|NodeTransformer)\
       :add_specialization("FunctionDecl", rewrite_namespaces::visit_func    |NodeTransformer)
