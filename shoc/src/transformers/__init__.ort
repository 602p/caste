import transform

import "transformers/lower/apply_includes.ort"
import "transformers/lower/rw_namespaces.ort"
import "transformers/lower/expand_augassign.ort"

import "transformers/opt/elide_groupings.ort"
import "transformers/opt/fold_constants.ort"
import "transformers/opt/elide_branches.ort"
import "transformers/opt/strip_seps.ort"
import "transformers/opt/elide_funcs.ort"

import "transformers/def/predefine_types.ort"
import "transformers/def/define_types.ort"
import "transformers/def/define_syms.ort"
import "transformers/def/catch_duplicates.ort"

import "transformers/pregir/define_locals.ort"
import "transformers/pregir/rw_calls.ort"

import "transformers/emit/__init__.ort"

import "transformers/get_type.ort"

function(Project p) shoc::transformers::init -> void does
	p:add_Transformer(apply_includes::init())

	p:add_Transformer(rewrite_namespaces::init())
	p:add_Transformer(expand_augassign::init())

	p:add_Transformer(elide_groupings::init())
	p:add_Transformer(fold_constants::init())
	p:add_Transformer(elide_branches::init())
	p:add_Transformer(strip_seps::init())

	p:add_Transformer(predefine_types::init())
	p:add_Transformer(define_types::init())
	p:add_Transformer(define_syms::init())
	p:add_Transformer(catch_duplicates::init())
	
	p:add_Transformer(define_locals::init())
	p:add_Transformer(rw_calls::init())

	p:add_Transformer(count_calls::init())
	p:add_Transformer(elide_funcs::init())
	# a

	p:add_Transformer(get_type::init())

	if p.options:contains("no_gir") do
		return
	done
	
	p:add_Transformer(emit_value::init())
	p:add_Transformer(emit_addr::init())
return