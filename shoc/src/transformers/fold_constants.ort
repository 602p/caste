
function(BinOpExpr n, TransformerPass p) fold_constants::visit_binop -> Node does
	if n.lhs:is_a("LiteralExpr") & n.rhs:is_a("LiteralExpr") do
		LiteralExpr lhs = n.lhs|LiteralExpr
		LiteralExpr rhs = n.rhs|LiteralExpr
		if (lhs.value_type=="int") & rhs.value_type=="int" do
			int rv=rhs.value:int()
			int lv=lhs.value:int()
			if n.op=="+" do
				return LiteralExpr::create_direct("int", (rv+lv):str())
			elif n.op=="-" do
				return LiteralExpr::create_direct("int", (lv-rv):str())
			elif n.op=="*" do
				return LiteralExpr::create_direct("int", (lv*rv):str())
			elif n.op=="/" do
				return LiteralExpr::create_direct("int", (lv/rv):str())
			elif n.op==">>" do
				return LiteralExpr::create_direct("int", (lv>>rv):str())
			elif n.op=="<<" do
				return LiteralExpr::create_direct("int", (lv<<rv):str())
			elif n.op=="==" do
				return LiteralExpr::create_direct("int", (lv==rv):str())
			elif n.op=="!=" do
				return LiteralExpr::create_direct("int", (lv!=rv):str())
			elif n.op==">" do
				return LiteralExpr::create_direct("int", (lv>rv):str())
			elif n.op=="<" do
				return LiteralExpr::create_direct("int", (lv<rv):str())
			elif n.op==">=" do
				return LiteralExpr::create_direct("int", (lv/rv):str())
			elif n.op=="<=" do
				return LiteralExpr::create_direct("int", (lv<=rv):str())
			elif n.op=="&" do
				return LiteralExpr::create_direct("int", (lv&rv):str())
			elif n.op=="%" do
				return LiteralExpr::create_direct("int", (lv%rv):str())
			done
		done
	done
return n|Node

function() fold_constants::init -> TransformerPass does
return TransformerPass::new("fold_constants")\
       :add_specialization("BinOpExpr", fold_constants::visit_binop|NodeTransformer)