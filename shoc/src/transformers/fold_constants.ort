
function(BinOpExpr n, TransformerPass p) fold_constants::visit_binop -> Node does
	if n.lhs:is_a("LiteralExpr") & n.rhs:is_a("LiteralExpr") do
		LiteralExpr lhs = n.lhs|LiteralExpr
		LiteralExpr rhs = n.rhs|LiteralExpr
		if (lhs.value_type=="int") & rhs.value_type=="int" do
			int ri=rhs.value:int()
			int li=lhs.value:int()
			if n.op=="+" do
				return LiteralExpr::create_direct_int(p.proj, ri+li)
			elif n.op=="-" do
				return LiteralExpr::create_direct_int(p.proj, li-ri)
			elif n.op=="*" do
				return LiteralExpr::create_direct_int(p.proj, li*ri)
			elif n.op=="/" do
				return LiteralExpr::create_direct_int(p.proj, li/ri)
			elif n.op==">>" do
				return LiteralExpr::create_direct_int(p.proj, li>>ri)
			elif n.op=="<<" do
				return LiteralExpr::create_direct_int(p.proj, li<<ri)
			elif n.op=="==" do
				return LiteralExpr::create_direct_bool(p.proj, li==ri)
			elif n.op=="!=" do
				return LiteralExpr::create_direct_bool(p.proj, li!=ri)
			elif n.op==">" do
				return LiteralExpr::create_direct_bool(p.proj, li>ri)
			elif n.op=="<" do
				return LiteralExpr::create_direct_bool(p.proj, li<ri)
			elif n.op==">=" do
				return LiteralExpr::create_direct_bool(p.proj, li>=ri)
			elif n.op=="<=" do
				return LiteralExpr::create_direct_bool(p.proj, li<=ri)
			elif n.op=="&" do
				return LiteralExpr::create_direct_int(p.proj, li&ri)
			elif n.op=="%" do
				return LiteralExpr::create_direct_int(p.proj, li%ri)
			done
		elif (lhs.value_type=="float") & rhs.value_type=="float" do
			float rf=rhs.value:float()
			float lf=lhs.value:float()
			if n.op=="+" do
				return LiteralExpr::create_direct_float(p.proj, rf+lf)
			elif n.op=="-" do
				return LiteralExpr::create_direct_float(p.proj, lf-rf)
			elif n.op=="*" do
				return LiteralExpr::create_direct_float(p.proj, lf*rf)
			elif n.op=="/" do
				return LiteralExpr::create_direct_float(p.proj, lf/rf)
			elif n.op=="==" do
				return LiteralExpr::create_direct_bool(p.proj, lf==rf)
			elif n.op=="!=" do
				return LiteralExpr::create_direct_bool(p.proj, lf!=rf)
			elif n.op==">" do
				return LiteralExpr::create_direct_bool(p.proj, lf>rf)
			elif n.op=="<" do
				return LiteralExpr::create_direct_bool(p.proj, lf<rf)
			elif n.op==">=" do
				return LiteralExpr::create_direct_bool(p.proj, lf>=rf)
			elif n.op=="<=" do
				return LiteralExpr::create_direct_bool(p.proj, lf<=rf)
			done
		elif (lhs.value_type=="cstr") & rhs.value_type=="cstr" do
			if n.op=="+" do
				return LiteralExpr::create_direct(p.proj, "cstr", lhs.value+rhs.value)
			done
		elif (lhs.value_type=="cstr") & rhs.value_type=="int" do
			if n.op=="*" do
				return LiteralExpr::create_direct(p.proj, "cstr", lhs.value*rhs.value:int())
			done
		done
	done
return n|Node

function() fold_constants::init -> TransformerPass does
return TransformerPass::new("fold_constants")\
       :add_specialization("BinOpExpr", fold_constants::visit_binop|NodeTransformer)