
function(IfExpr n, TransformerPass p) elide_branches::visit_if -> Node does
	if n.condition:is_a("LiteralExpr") do
		LiteralExpr lit = n.condition|LiteralExpr
		if (lit.value_type=="int"):or(lit.value_type=="bool") do
			if lit.value:int()!=0 do
				return BlockBody::create_direct(p.proj, n.body.statements)|Node
			else do
				if n.body.has_runoff_clause do
					if n.body.runoff_clause:is_a("BlockBody") do
						return BlockBody::create_direct(p.proj, (n.body.runoff_clause|BlockBody).statements)|Node
					done
				else do
					return null|Node
				done
			done
		done
	done
return n|Node

function(WhileExpr n, TransformerPass p) elide_branches::visit_while -> Node does
	if n.condition:is_a("LiteralExpr") do
		LiteralExpr lit = n.condition|LiteralExpr
		if lit.value_type=="int" do
			if lit.value:int()==0 do
				return null|Node
			done
		done
	done
return n|Node

function() elide_branches::init -> TransformerPass does
return TransformerPass::new("elide_branches")\
       :add_specialization("IfExpr",    elide_branches::visit_if   |NodeTransformer)\
       :add_specialization("WhileExpr", elide_branches::visit_while|NodeTransformer)