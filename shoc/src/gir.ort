
type GIRInstruction is packed
	GIRInstructionType _gir_ty

	function(GIRInstruction inst) GIRInstruction:print -> void does
		inst._gir_ty._printer(inst)
	return
endtype

type GIRInstructionPrinter is a function->void #(GIRInstruction)
type GIRInstructionType is
	cstr name
	GIRInstructionPrinter _printer

	function(cstr name) GIRInstructionType::new -> GIRInstructionType does
		GIRInstructionType new = mem::a(@sizeof(GIRInstructionType)@)|GIRInstructionType
		new.name=name
	return new

	function(GIRInstructionType ty, GIRInstructionPrinter f) GIRInstructionType:set_printer -> GIRInstructionType does
		ty._printer=f
	return ty

	function(cstr name) GIRInstructionType::called -> GIRInstructionType does
		int i=0
		GIRInstructionType c
		while i<gir_types.len do
			c=gir_types:get(i)|GIRInstructionType
			if c.name==name do
				return c
			done
			i+=1
		done
		shoc::bail_out("Request for nonexistant GIRInstructionType via ::called - "+name)
	return null|GIRInstructionType
endtype

function(List l, GIRInstructionType t) List:append_GIRInstTy -> void does
	l:append(t|ptr)
return

import datamodel
import "gir/stack_alloc.ort"

List gir_types

function() gir::init -> void does
	List l=List::new()

	l:append_GIRInstTy(GIRStackAlloc::impl())

	gir_types=l
return