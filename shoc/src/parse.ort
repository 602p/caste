import linkedlist
import lex
import progressbar
import transform

function(Token self, cstr type_) Token:is_a -> bool does
return self.type_.name==type_

function(int depth) parse::indent -> void does
	int i=0
	while i<depth do
		printf("\t")
		i+=1
	done
return

type Node is packed
	NodeType type_
	function(Node self) Node:free -> void does
		#self.type_.deleter(self)
		#free(self|ptr)
		0#TODO: Re-implement this
	return

	function(Node self, int depth) Node:print -> void does
		self.type_.printer(self, depth)
	return

	function(Node self) Node:print_root -> void does
		self:print(0)
	return

	function(Node self, cstr ty) Node:is_a -> bool does
	return self.type_:is_a(ty)

	function(Node self, TransformerPass p) Node:run_transformer_on_children -> void does
		self.type_.child_visitor(self, p)
	return
endtype

type Element is
	bool is_token
	ptr thing

	function(Token t) Element::from_token -> Element does
		Element new = malloc(@sizeof(Element)@)|Element
		new.is_token=true
		new.thing=t|ptr
	return new

	function(Node n) Element::from_node -> Element does
		Element new = malloc(@sizeof(Element)@)|Element
		new.is_token=false
		new.thing=n|ptr
	return new

	function(Element self) Element:t -> Token does
		if -self.is_token do
			printf("\nE: shoc/parse//Token:t() on non-token\n")
			printf("\tCalled on: ")
			self:print()
			shoc::bail_out("Invalid Element Narrowing")
		done
	return self.thing|Token

	function(Element self) Element:n -> Node does
		if self.is_token do
			printf("\nE: shoc/parse//Token:n() on non-node\n")
			printf("\tCalled on: ")
			self:print()
			shoc::bail_out("Invalid Element Narrowing")
		done
	return self.thing|Node

	function(Element self) Element:print -> void does
		if self.is_token do
			self:t():print()
		else do
			self:n():print(1)
		done
	return

	function(Element self) Element:free -> void does
		if self.is_token do
			(self.thing|Token):free()
		else do
			(self.thing|Node):free()
		done
		free(self|ptr)
	return
endtype

type EleList is
	int position
	List list
	Project proj

	function(Project p, List l) EleList::from -> EleList does
		EleList new = malloc(@sizeof(EleList)@)|EleList
		new.list=List::new()
		new.proj=p
		int i=0
		while i<l.len do
			new.list:append(Element::from_token(l:get(i)|Token)|ptr)
			i+=1
		done
		new.position=l.len-1
	return new

	function(EleList self, int pos) EleList:get -> Element does
		# printf(" - %i, len=%i\n", self.position+pos, self.list.len)
		if (self.position+pos)>=self.list.len do
			shoc::bail_out("Requested EleList pos > than exists, "+(self.position+pos):str()+">"+self.list.len:str())
		done
		if (self.position+pos)<0 do
			shoc::bail_out("Requested EleList pos <0")
		done
	return self.list:get(self.position+pos)|Element

	function(EleList self) EleList:get_lookahead -> Element does
	return self:get(-1)

	function(EleList self) EleList:has_lookahead -> bool does
	return self.position!=0

	function(EleList self, int by) EleList:advance -> EleList does
		self.position-=by
	return self

	function(EleList self) EleList:in_slice -> int does
	return self.list.len-self.position

	function(EleList self, int count, Element e) EleList:set_tail -> EleList does
		int i=0
		while i<count do #It was at this point that I realized I don't have a :set, LOL
			self.list:del(self.position)
			i+=1
		done
		self.list:insert(self.position, e|ptr)
	return self

	function(EleList self) EleList:print -> void does
		int i=0
		while i<self.list.len do
			printf("%03i", i)
			if i==self.position do
				printf("*")
			done
			printf("\t")
			(self.list:get(i)|Element):print()
			i+=1
		done
	return

	function(EleList self, int depth) EleList:print_depth -> void does
		int i=0
		while i<self.list.len do
			parse::indent(depth)
			printf("%03i", i)
			if i==self.position do
				printf("*")
			done
			printf("\t")
			if (self.list:get(i)|Element).is_token do
				(self.list:get(i)|Element):print()
			else do
				(self.list:get(i)|Element):n():print(depth+1)
			done
			i+=1
		done
	return
endtype

type NodeDeleter is a function->void #(Node node)
type NodePrinter is a function->void #(Node node, int depth)
type NodeVisitor is a function->void #(Node node, TransformerPass p)
type NodeCreator is a function->Node #(EleList elems) -> created node
type NodeMatcher is a function->int  #(EleList elems) -> number consumed

function(Node n, TransformerPass p) _default_node_child_visitor -> void does
return

type NodeType is
	cstr name
	List things_i_am

	NodePrinter printer
	NodeDeleter deleter
	NodeCreator creator
	NodeVisitor child_visitor

	int matcher_flags #0 = Default, 1 = Match only tokens, 2 = Match only nodes
	int matcher_count #min number of elemnts left requred
	NodeMatcher matcher

	function(NodeType self, NodePrinter p) NodeType:set_printer -> NodeType does
		self.printer=p
	return self

	function(NodeType self, NodeVisitor v) NodeType:set_visitor -> NodeType does
		self.child_visitor=v
	return self

	function(NodeType self, NodeDeleter d) NodeType:set_deleter -> NodeType does
		self.deleter=d
	return self

	function(NodeType self, NodeCreator d) NodeType:set_creator -> NodeType does
		self.creator=d
	return self

	function(NodeType self, NodeMatcher m) NodeType:set_matcher -> NodeType does
		self.matcher=m
	return self

	function(NodeType self, EleList eles) NodeType:create_node -> Node does
		Node new = self.creator(eles)
		new.type_=self
	return new

	function(cstr name) NodeType::new -> NodeType does
		NodeType new = malloc(@sizeof(NodeType)@)|NodeType
		new.name=name
		new.child_visitor=_default_node_child_visitor|NodeVisitor

		new.things_i_am=null|List
		new.matcher_count=1
		new.matcher_flags=0
	return new

	function(NodeType self, EleList elements) NodeType:match -> int does
		if self.matcher|ptr==null do
			return 0
		done

		if elements:in_slice()<self.matcher_count do
			return 0
		done

		if self.matcher_flags!=0 do
			int i=0
			while i<self.matcher_count do
				if ((self.matcher_flags==1) & -elements:get(i).is_token):or(\
					(self.matcher_flags==2) &  elements:get(i).is_token) do
					return 0
				done
				i+=1
			done
		done
	return self.matcher(elements)

	function(NodeType self, int count) NodeType:matches -> NodeType does
		self.matcher_count=count
	return self

	function(NodeType self) NodeType:matches_only_tokens -> NodeType does
		self.matcher_flags=1
	return self

	function(NodeType self) NodeType:matches_only_nodes -> NodeType does
		self.matcher_flags=2
	return self

	function(NodeType self, cstr thing) NodeType:isinstance -> bool does
		if thing==self.name do
			return true
		done

		if self.things_i_am|ptr==null do
			return false
		done

		int i=0
		while i<self.things_i_am.len do
			if (self.things_i_am:get(i)|cstr)==thing do
				return true
			done
			i+=1
		done
	return false

	function(NodeType self, cstr thing) NodeType:is_a -> bool does
	return self:isinstance(thing)

	function(NodeType self, cstr thing) NodeType:addtype -> NodeType does
		if self.things_i_am|ptr==null do
			self.things_i_am=List::new()
		done
		self.things_i_am:append(thing|ptr)

		if thing=="ValueExpression" do
			self:addtype("Expression")
		done

		if thing=="IdentifierExpression" do
			self:addtype("ValueExpression")
		done
	return self

	function(NodeType self) NodeType:free -> void does
		free(self|ptr)
	return
endtype

function(Project p, cstr name) Project:type_by_name -> NodeType does
	int i=0
	while i<p.node_types.len do
		if (p.node_types:get(i)|NodeType).name==name do
			return p.node_types:get(i)|NodeType
		done
		i+=1
	done
return null|NodeType

function(List l, NodeType n) List:append_NodeType -> void does
	l:append(n|ptr)
return

function(List l, Node n) List:append_Node -> void does
	l:append(n|ptr)
return

function(List l, int n) List:get_Node -> Node does
return l:get(n)|Node

function(EleList e, cstr s) parse::update_viz -> void does
	bool fancy = false
	float speed= 0.0

	if fancy do
		usleep((speed*1000000.)|int)
		system("clear")
	done
	printf("\n\nParsing '%s'\n\n", s)
	e:print()
return

function(Project p, List tokens, cstr text, bool verbose) Project:parse -> Node does
	EleList eles=EleList::from(p, tokens)
	ProgressBar bar
	if verbose do
		bar = ProgressBar::new_reversed(tokens.len, 40, "Parsing......")
	done

	bool     progress
	int      current_type_idx
	NodeType current_type
	int      match_count
	bool     DEBUG=p.options:contains("parse_debug")

	while eles.position>=0 do
		progress=true
		while progress do
			progress=false
			current_type_idx=0
			while (current_type_idx<p.node_types.len) & -progress do
				current_type=p.node_types:get(current_type_idx)|NodeType
				#printf("%s\n", current_type.name)
				match_count=current_type:match(eles)
				if match_count>0 do
					eles:set_tail(match_count,\
						Element::from_node(current_type:create_node(eles)))
					progress=true
					if DEBUG do
						parse::update_viz(eles, text)
						printf("Replaced %i elements at %i with a %s node\n",\
					 		match_count, eles.position, current_type.name)
					done
				done
				current_type_idx+=1
			done
		done
		eles:advance(1)
		if DEBUG do
			parse::update_viz(eles, text)
			printf("No further possible parses, advanced by 1\n")
		done
		if verbose do
			bar:update(eles.position+1)
		done
	done
	eles.position=0
return FileNode::create(p, eles)|Node

import lex
import parse

function(EleList eles) parse::lookahead_is_accessor -> bool does
	if eles:has_lookahead() do
		if eles:get_lookahead().is_token do
			if (eles:get_lookahead():t().type_.name=="T_DOT"):or(\
				eles:get_lookahead():t().type_.name=="T_COLON"):or(\
				eles:get_lookahead():t().type_.name=="T_DOUBLECOLON"):or(\
				eles:get_lookahead():t().type_.name=="T_CAST") do #Pretty much an accessor, transforms type
				return true
			done
		done
	done
return false

function(EleList eles) parse::lookahead_is_possibly_function -> bool does
	if eles:has_lookahead() do
		if eles:get_lookahead().is_token do
			if eles:get_lookahead():t():is_a("T_NAME"):or(\
			   eles:get_lookahead():t():is_a("T_PAREN_CLOSE")):or(\
			   eles:get_lookahead():t():is_a("T_BRACKET_CLOSE")):or(\
			   eles:get_lookahead():t():is_a("T_INTRINSIC")) do
			   return true #Cases where it may be a function invocation
			done
		done
	done
return false

import grammar

function(List l) parse::init_default -> void does
	grammar::install(l)
return

function(Project proj) Project:show_types -> void does
	int p=0
	int i
	NodeType t
	while p<proj.node_types.len do
		t=proj.node_types:get(p)|NodeType
		printf("\n%s%s:", t.name, " "*(20-t.name:len()))
		if t.things_i_am|ptr!=null do
			i=t.things_i_am.len-1
			while i>-1 do
				printf(" %s%s", t.things_i_am:get(i)|cstr, " "*(25-(t.things_i_am:get(i)|cstr):len()))
				i-=1
			done
		done
		printf(" %s", t.name)
		p+=1
	done
	printf("\n")
return

function(cstr literal) shoc::parse_string_literal -> cstr does
	cstr parsed = malloc(literal:len()+1)
	# printf("Parsing string: %s\n", literal)
	int i=0
	int o=0
	while i<literal:len() do
		# printf("i=%i, o=%i\n", i, o)
		if literal[i]|int==92 do
			i+=1
			# printf("Escaped! - literal[%i]=%i\n", i, literal[i]|int)
			if literal[i]==bord("n") do
				parsed[o]=bord("\n")
			elif literal[i]==bord("r") do
				parsed[o]=bord("\r")
			elif literal[i]==bord("t") do
				parsed[o]=bord("\t")
			elif literal[i]==bord("\\") do
				parsed[o]=bord("\\")
			elif literal[i]==bord("0") do
				parsed[o]=bord("\0")
			else do
				shoc::bail_out("Unknown escape: "+(literal[i]|int):str())
			done
		else do
			parsed[o]=literal[i]
		done
		i+=1
		o+=1
	done
	parsed[o]=bord("\0")
return parsed