import gir

type GIRVar is
	OType type_
	int   ssa_id
	bool  is_ref
	cstr  memoname

	function(Project p, OType t) GIRVar::new -> GIRVar does
		GIRVar new = malloc(@sizeof(GIRVar)@)|GIRVar
		new.type_=t
		new.memoname=""
		new.is_ref=false
		new.ssa_id=p.ssa_count
		p.ssa_count+=1
	return new

	function(GIRVar v) GIRVar:ref -> GIRVar does
		v.is_ref=true
	return v

	function(GIRVar v, cstr s) GIRVar:set_memo -> GIRVar does
		v.memoname=s
	return v

	function(GIRVar v) GIRVar:str -> cstr does
		if v.is_ref do
			return v.ssa_id:str()+"("+v.type_.name+"*: "+v.memoname+")"
		done
	return v.ssa_id:str()+"("+v.type_.name+": "+v.memoname+")"
endtype

type GIRInstPrinter is a function->void #(GIRInst)

type GIRInstType is
	cstr name
	GIRInstPrinter printer

	function(cstr name) GIRInstType::new -> GIRInstType does
		GIRInstType new = malloc(@sizeof(GIRInstType)@)|GIRInstType
		new.name=name
	return new

	function(GIRInstType self, GIRInstPrinter p) GIRInstType:set_printer -> GIRInstType does
		self.printer=p
	return self
endtype

type GIRInst is packed
	GIRInstType _gir_ty #initially a cstr at construction, bound into a real GIRInstType in :emit_gir

	function(GIRInst inst) GIRInst:print -> void does
		inst._gir_ty.printer(inst)
	return

	function(GIRInst inst, cstr type_name) GIRInst:set_type -> void does
		inst._gir_ty=type_name|GIRInstType
	return

	function(Project proj, cstr typename, int size) GIRInst::create -> GIRInst does
		GIRInst new = malloc(size)|GIRInst
		proj:bind_gir_type(new, typename)
	return new
endtype

function(List l, GIRInst i) List:append_GIRInst -> void does
	l:append(i|ptr)
return

function(List l, int i) List:get_GIRInst -> GIRInst does
return l:get(i)|GIRInst

function(List l, GIRVar i) List:append_GIRVar -> void does
	l:append(i|ptr)
return

function(List l, int i) List:get_GIRVar -> GIRVar does
return l:get(i)|GIRVar

function(Project p, GIRInst i) Project:emit_gir -> cstr does
	p.curr_method.gir_code:append_GIRInst(i)
return "?"

function(Project p, GIRInst i, cstr name) Project:bind_gir_type -> void does
	int k=0
	while k<p.gir_types.len do
		if (p.gir_types:get(k)|GIRInstType).name==name do
			i._gir_ty=p.gir_types:get(k)|GIRInstType
			return
		done
		k+=1
	done
	shoc::bail_out("Can't bind GIRInstType '"+name+"', dosen't exist")
return