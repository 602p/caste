import strmap
import parse

type NodeTransformer is a function->Node #taking (Node, TransformerPass), returning new node for tree

type TransformerPass is
	cstr    name
	StrMap  visitor_map
	ptr     extra_info
	Project proj
	bool    visit_children
	bool    default_run

	function(cstr name) TransformerPass::new -> TransformerPass does
		TransformerPass new = malloc(@sizeof(TransformerPass)@)|TransformerPass
		new.name=name
		new.visit_children=true
		new.visitor_map=StrMap::new()
		new.default_run=true
	return new

	function(TransformerPass p) TransformerPass:no_auto_visit -> TransformerPass does
		p.visit_children=false
	return p

	function(TransformerPass p) TransformerPass:no_default_run -> TransformerPass does
		p.default_run=false
	return p

	function(TransformerPass p, Project proj) TransformerPass:set_project -> TransformerPass does
		p.proj=proj
	return p

	function(TransformerPass self, cstr node_type, NodeTransformer visitor) TransformerPass:add_specialization -> TransformerPass does
		self.visitor_map:set(node_type, visitor|ptr)
	return self

	function(TransformerPass self, ptr info) TransformerPass:set_info -> TransformerPass does
		self.extra_info=info
	return self

	function(TransformerPass self, Node n) TransformerPass:visit_children -> void does
		n:run_transformer_on_children(self)
	return

	function(TransformerPass self, Node n) TransformerPass:visit -> Node does
		if self.visit_children do
			self:visit_children(n)
		done
		if self.visitor_map:contains(n.type_.name) do
			ptr entry = self.visitor_map:get(n.type_.name)
			NodeTransformer v = entry|NodeTransformer
			return v(n, self)
		done
	return n

	function(TransformerPass self, Node n) TransformerPass:visit_GIRVar -> GIRVar does
	return self:visit(n)|GIRVar
endtype

function(Project p, Node n) Project:run_transformers -> Node does
	int i=0
	fprintf(stderr, "Running transformer passes... ")
	fflush(stderr)
	while i<p.transformer_passes.len do
		if (p.transformer_passes:get(i)|TransformerPass).default_run do
			fprintf(stderr, "%s ", (p.transformer_passes:get(i)|TransformerPass).name)
			fflush(stderr)
			n=(p.transformer_passes:get(i)|TransformerPass):visit(n)
		done
		i+=1
	done
	fprintf(stderr, "\n")
return n