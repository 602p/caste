#"SHOC STARTS HERE"
import std
import fileio
import args
import stdio
import err
import profile
import mem
import os
# asdnq3i9q0dj9 2309fj[yyy{}]
import shoc
import llvm

function(int nargs, ArgList args) main -> int does
	mem::init_arena_allocator(1024*1024)

	orth::install_sigsev_handler()

	stdio::init()
	if nargs<2 do
		orth::fail("E: Bad args\n")
	done

	List search_path=List::new()
	search_path:append(".")
	search_path:append("lib")
	search_path:append("../lib")
	search_path:append("../../lib")

	StrMap options = StrMap::new()
	options:set("output_path", "out")

	int i=1
	cstr arg
	while i<nargs do
		arg=args:get(i)

		if arg:startswith("-s") do
			search_path:append(arg:offset(2))
		done

		if arg:startswith("-f") do
			options:set(arg:offset(2), "1")
		done

		if arg:startswith("-o") do
			options:set("output_path", arg:offset(2))
		done

		i+=1
	done

	if options:contains("profile"):or(options:contains("profile_dump_csv")) do
		orth::internal::profile::install_profiler()
	done

	File fd = File::open(args:get(1), "r")
	cstr contents=fd:readall()+"\n"
	fd:close()

	Project proj = shoc::get_empty_project()\
	                    :with_options(options)\
	                    :with_base_tokens()\
	                    :with_base_grammar()\
	                    :with_base_passes()\
	                    :with_base_gir()\
	                    :with_arch_bits(64)\
	                    :with_base_types()\
	                    :with_search_path(search_path)
	                   

	List tokens = proj:tokenize(contents)
	Node node   = proj:parse(tokens, contents)

	if options:contains("dump_pre_ast") do
		node:print_root()
	done

	node = proj:run_transformers(node)

	if options:contains("dump_ast") do
		node:print_root()
	done

	if options:contains("math_test_out") do
		printf("%s\n", ((node|FileNode).statements:get(0)|LiteralExpr).value)
	done

	if options:contains("dump_types") do
		printf("\n\n===TYPES===\n\n")
		i=0
		while i<proj.types:num_keys() do
			(proj.types:get_by_num(i)|OType):print()
			i+=1
		done
	done

	if options:contains("dump_methods"):or(options:contains("dump_locals")):or(options:contains("dump_gir")) do
		printf("\n\n===METHODS===\n\n")
		int j=0
		Method meth
		TypedVar var
		while j<proj.methods:num_keys() do
			meth=(proj.methods:get_by_num(j)|Method)
			meth:print()
			if options:contains("dump_locals") do
				meth:print_locals()
			done

			if options:contains("dump_gir") do
				meth:print_gir()
			done
			j+=1
		done
	done

	if options:contains("dump_globals") do
		printf("\n\n===GLOBALS===\n\n")
		int l=0
		while l<proj.globals:num_keys() do
			printf("GLOBAL: %s - %s\n", (proj.globals:get_by_num(l)|TypedVar).name,  (proj.globals:get_by_num(l)|TypedVar).type_.name)
			l+=1
		done
	done

	if options:contains("dump_node_types") do
		printf("\n\n===PARSE NODE TYPES===\n\n")
		proj:show_types()
	done

	if -options:contains("no_llvm_out") do
		cstr outpath = options:get("output_path")|cstr
		proj:emit_as_llvm(outpath+".ir")

		if -options:contains("no_finish_build") do
			os::run("llc-3.5 "+outpath+".ir")
			os::run("gcc "+outpath+".ir.s -o "+outpath)

			if -options:contains("no_clean") do
				os::run("rm "+outpath+".ir "+outpath+".ir.s")
			done
		done
	done

	if options:contains("profile_dump_csv") do
		orth::internal::profile::dump_profiling_data_csv("profile.csv")
	done

	mem::clean_up()
return 0