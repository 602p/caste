type GenericArgs is
	StrMap _args
	List _order

	function() GenericArgs::new -> GenericArgs does
		GenericArgs self = malloc(@sizeof(GenericArgs)@)|GenericArgs
		self._args = StrMap::new()
		self._order = List::new()
	return self

	function(GenericArgs other) GenericArgs::copy -> GenericArgs does
		GenericArgs self = malloc(@sizeof(GenericArgs)@)|GenericArgs
		self._args = StrMap::new()
		self._order = List::new()
		int i=0
		while i<other:len() do
			self:add(other:get_name_for_idx(i), other:get_idx(i))
			i+=1
		done
	return self

	function(GenericArgs self, cstr name, OType arg) GenericArgs:add -> void does
		self._order:append(name)
		self._args:set(name, arg|ptr)
	return

	function(GenericArgs self, cstr name, OType arg) GenericArgs:set -> void does
		self._args:set(name, arg|ptr)
	return

	function(GenericArgs self, cstr name) GenericArgs:add_null -> void does
		self:add(name, null|OType)
	return

	function(GenericArgs self, cstr name) GenericArgs:get_name -> OType does
	return self._args:get(name)|OType

	function(GenericArgs self, int idx) GenericArgs:get_name_for_idx -> cstr does
	return self._order:get(idx)

	function(GenericArgs self, int idx) GenericArgs:get_idx -> OType does
	return self:get_name(self:get_name_for_idx(idx))

	function(GenericArgs self) GenericArgs:len -> int does
	return self._order.len
endtype

type GType is
	cstr name
	GenericArgs arguments #(map of generic name -> OType OR null if no default)
	bool packed
	List fields #List of TypedVars
	Project proj

	function(Project p, cstr name, bool packed, GenericArgs arguments) GType::new -> GType does
		GType self = malloc(@sizeof(GType)@)|GType
		self.name=name
		self.arguments=arguments
		self.fields = List::new()
		self.packed = packed
		self.proj=p
	return self

	function(GType self, GenericArgs params) GType:apply -> OType does
		cstr mangled_name = self.name+"."

		int i=0
		while i<params:len() do
			mangled_name+=params:get_idx(i).name+"."
			i+=1
		done

		if self.proj.types:contains(mangled_name) do
			return self.proj:get_type(mangled_name)
		done
		
		StructOType new_t = StructOType::new(mangled_name)|StructOType
		new_t.packed=self.packed
		self.proj:add_Type(new_t|OType)

		i=0
		while i<self.fields.len do
			TypedVar orig_var = self.fields:get_TypedVar(i)
			OType resolved_var = orig_var.type_
			if resolved_var.variety==SYMTYPE do
				resolved_var=params:get_name(resolved_var.name)
			done
			resolved_var=resolved_var:resolve(params)
			new_t:add_field(TypedVar::new(orig_var.name, resolved_var))
			i+=1
		done
	return new_t|OType

	function(GType self) GType:print -> void does
		printf("GType: %s ", self.name)
		if self.packed do
			printf("packed ")
		done
		printf("\n")
		int i=0
		while i<self.fields.len do
			printf(" -field: %s:", self.fields:get_TypedVar(i).name)
			self.fields:get_TypedVar(i).type_:print()
			i+=1
		done
		i=0
		while i<self.arguments:len() do
			printf(" -arg: %s: ", self.arguments:get_name_for_idx(i))
			if self.arguments:get_idx(i)|ptr!=null do
				self.arguments:get_idx(i):print()
			else do
				printf(" [no default]\n")
			done
			i+=1
		done
	return
endtype

type PType is packed
	int variety
	cstr name
	Project proj
	GType generic
	GenericArgs arguments #(map of generic name -> OType OR null if using default)

	function(GType generic, GenericArgs arguments) PType::new -> OType does
		PType self = malloc(@sizeof(PType)@)|PType
		self.generic=generic
		self.arguments=arguments
		self.variety=PTYPE
		self.name="[Generic Of: "+generic.name+"]"
	return self|OType

	function(PType self, GenericArgs params) PType:resolve -> OType does
		int i=0
		GenericArgs inst_args = GenericArgs::copy(self.arguments)
		while i<self.arguments:len() do
			if self.arguments:get_idx(i).variety==SYMTYPE do
				self.arguments:set(self.arguments:get_name_for_idx(i), params:get_name(self.arguments:get_name_for_idx(i)))
			done
			i+=1
		done
	return self.generic:apply(self.arguments)

	function(PType self) PType:print -> void does
		printf("PType %s\n", self.name)
		int i=0
		while i<self.arguments:len() do
			printf(" -arg: %s: ", self.arguments:get_name_for_idx(i))
			self.arguments:get_idx(i):print()
			i+=1
		done
	return
endtype

type SymType is packed
	int variety
	cstr name
	Project proj

	function(cstr name) SymType::new -> OType does
		SymType self = malloc(@sizeof(SymType)@)|SymType
		self.variety=SYMTYPE
		self.name=name
	return self|OType

	function(SymType self) SymType:print -> void does
		printf("[SymType %s]\n", self.name)
	return
endtype
