import "llvm/emitter.ort"
import "llvm/type_impls.ort"
import "llvm/emitters/method.ort"
import "llvm/emitters/literal.ort"
import "llvm/emitters/return.ort"
import "llvm/emitters/get_local.ort"
import "llvm/emitters/get_method.ort"
import "llvm/emitters/load.ort"
import "llvm/emitters/store.ort"
import "llvm/emitters/binop.ort"
import "llvm/emitters/cast.ort"
import "llvm/emitters/call.ort"
import "llvm/emitters/label.ort"
import "llvm/emitters/jump.ort"
import "llvm/emitters/get_member.ort"
import "llvm/emitters/get_index.ort"

function(GIRVar var) llvm::make_local_handle -> cstr does
return "%t_"+var.ssa_id:str()

function(Project p, cstr filename) Project:emit_as_llvm -> Project does
	File out = File::open(filename, "w")
	LLVMEmitter context = LLVMEmitter::new(out)\
	                                  :register_emitter("literal",    llvm::emit_literal     |LLVMGIREmitter)\
	                                  :register_emitter("return",     llvm::emit_return      |LLVMGIREmitter)\
	                                  :register_emitter("get_local",  llvm::emit_get_local   |LLVMGIREmitter)\
	                                  :register_emitter("get_method", llvm::emit_get_method |LLVMGIREmitter)\
	                                  :register_emitter("load",       llvm::emit_load        |LLVMGIREmitter)\
	                                  :register_emitter("store",      llvm::emit_store       |LLVMGIREmitter)\
	                                  :register_emitter("binop",      llvm::emit_binop       |LLVMGIREmitter)\
	                                  :register_emitter("cast",       llvm::emit_cast        |LLVMGIREmitter)\
	                                  :register_emitter("call",       llvm::emit_call        |LLVMGIREmitter)\
	                                  :register_emitter("label",      llvm::emit_label       |LLVMGIREmitter)\
	                                  :register_emitter("jump",       llvm::emit_jump        |LLVMGIREmitter)\
	                                  :register_emitter("get_member", llvm::emit_get_member  |LLVMGIREmitter)\
	                                  :register_emitter("get_index",  llvm::emit_get_index   |LLVMGIREmitter)

	printf("\nLLVM Emitter Running..\n")
	int j=0
	OType typ

	while j<p.types:num_keys() do
		llvm::define_type(context, p.types:get_by_num(j)|OType)
		j+=1
	done

	j=0
	while j<p.types:num_keys() do
		llvm::register_type(context, p.types:get_by_num(j)|OType)
		j+=1
	done

	j=0
	Method meth
	while j<p.methods:num_keys() do
		llvm::emit_method(p.methods:get_by_num(j)|Method, context)
		j+=1
	done

	context:emit_cached_globals()

	if p.options:contains("dump_llvm_mappings") do
		llvm::dump_debug(context)
	done

	out:close()
return p

function(LLVMEmitter context) llvm::dump_debug -> void does
	printf("\n===LLVM EMITTER INFO===\n")
	int a=0
	int b
	printf("\nLocals Mappings:\n")
	while a<context.locals_maps:num_keys() do
		b=0
		printf(" Mapping for function: %s\n", context.locals_maps:get_key_by_num(a))
		while b<(context.locals_maps:get(context.locals_maps:get_key_by_num(a))|StrMap):num_keys() do
			printf("\t%s -> %s\n", (context.locals_maps:get(context.locals_maps:get_key_by_num(a))|StrMap):get_key_by_num(b),\
				                   (context.locals_maps:get(context.locals_maps:get_key_by_num(a))|StrMap):get_by_num(b))
			b+=1
		done
		a+=1
	done

	a=0
	printf("\nSSA Mappings:\n")
	while a<context.ssa_map:num_keys() do
		printf("\t%s -> %s\n", context.ssa_map:get_key_by_num(a), context.ssa_map:get_by_num(a))
		a+=1
	done

	a=0
	printf("\nType Mappings:\n")
	while a<context.types_map:num_keys() do
		printf("\t%s -> %s\n", context.types_map:get_key_by_num(a), context.types_map:get_by_num(a))
		a+=1
	done
return