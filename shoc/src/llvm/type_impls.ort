import "llvm/binop_impls.ort"
import "llvm/cast_impls.ort"

function(GIRVar lhs, GIRVar rhs, cstr op, cstr dest, LLVMEmitter e) llvm::impl_binop -> void does
	shoc::assert(lhs.type_.name==rhs.type_.name, "Invalid binop on nonmatching operands: "+op)

	if lhs.type_.variety==S_INT do
		llvm::s_int::impl_binop(lhs, rhs, op, dest, e)
	elif (lhs.type_.variety==U_INT):or(lhs.type_.variety==POINTER) do
		llvm::u_int::impl_binop(lhs, rhs, op, dest, e)
	elif lhs.type_.variety==FLOAT do
		llvm::float::impl_binop(lhs, rhs, op, dest, e)
	else do
		shoc::bail_out("llvm::impl_binop: Invalid type "+lhs.type_.name+" for binop :"+op)
	done
return

function(GIRVar value, OType target, cstr dest, LLVMEmitter e) llvm::impl_cast -> void does
	if value.type_.variety==S_INT do
		llvm::s_int::impl_cast(value, target, dest, e)
	elif value.type_.variety==U_INT do
		llvm::u_int::impl_cast(value, target, dest, e)
	elif value.type_.variety==FLOAT do
		llvm::float::impl_cast(value, target, dest, e)
	elif value.type_.variety==STRUCT do
		llvm::struct::impl_cast(value, target, dest, e)
	elif (value.type_.variety==POINTER)+(value.type_.variety==F_PTR) do
		llvm::pointer::impl_cast(value, target, dest, e)
	else do
		shoc::bail_out("Invalid type "+value.type_.name+" for cast")
	done
return

function(LLVMEmitter ctx, OType t) llvm::define_pass1 -> void does
	if t:is_struct() do
		ctx.types_map:set(t.name, "%ty_"+t.name+"_struct*")
	done
return

function(LLVMEmitter ctx, OType t) llvm::define_pass2 -> void does
	bool ok
	int i
	if t:is_fptr() do
		if -t:as_fptr().return_value:is_fptr() do
			i=0
			ok=true
			if -(t:as_fptr().args|ptr==null) do
				while i<t:as_fptr().args.len do
					if t:as_fptr().args:get_OType(i):is_fptr() do
						ok=false
					done
					i+=1
				done
			done
			if ok do
				cstr rep = ctx:get_ty(t:as_fptr().return_value)+" ("
				if t:as_fptr().args|ptr==null do
					rep+="..."
				else do
					i=0
					while i<t:as_fptr().args.len do
						rep+=ctx:get_ty(t:as_fptr().args:get_OType(i))
						if i!=t:as_fptr().args.len-1 do
							rep+=", "
						done
						i+=1
					done
				done
				rep+=")*"
				ctx.types_map:set(t.name, rep)
			done
		done
	done
return

function(LLVMEmitter ctx, OType t) llvm::define_pass2_point_5 -> void does
	if t:is_fptr() do
		cstr rep = ctx:get_ty(t:as_fptr().return_value)+" ("
		if t:as_fptr().args|ptr==null do
			rep+="..."
		else do
			int i=0
			while i<t:as_fptr().args.len do
				rep+=ctx:get_ty(t:as_fptr().args:get_OType(i))
				if i!=t:as_fptr().args.len-1 do
					rep+=", "
				done
				i+=1
			done
		done
		rep+=")*"
		ctx.types_map:set(t.name, rep)
	done
return

function(LLVMEmitter ctx, OType t) llvm::define_pass3 -> void does
	if t:is_struct() do
		cstr rep = "<{"
		int j=0
		while j<t:as_struct().fields.len do
			rep+=ctx:get_ty(t:as_struct().fields:get_TypedVar(j).type_)
			if j!=t:as_struct().fields.len-1 do
				rep+=", "
			done
			j+=1
		done
		rep+="}>"
		ctx:emitl("%ty_"+t.name+"_struct = type"+rep)
	elif t:is_primitive():or(t:is_fptr()) do
		0
	else do
		shoc::bail_out("Unimplemented register_type - "+t.name)
	done
return