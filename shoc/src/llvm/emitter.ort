
type LLVMGIREmitter is a function->cstr #(GIRInst, LLVMEmitter)

function(cstr literal) llvm::encode_literal -> cstr does
	cstr encoded = malloc((literal:len()*3)+1)
	int i=0
	while i<literal:len() do
		encoded[i*3]=bord("\\")
		encoded[(i*3)+1]=("0123456789ABCDEF")[(literal[i]|int)>>4]
		encoded[(i*3)+2]=("0123456789ABCDEF")[(literal[i]|int)&15]
		i+=1
	done
	encoded[literal:len()*3]=bord("\0")
	# printf("Did literal encoding '%s' -> '%s'\n", literal, encoded)
return encoded

function(cstr text) llvm::make_string_type -> cstr does
return "["+(text:len()+1):str()+" x i8]"

type LLVMEmitter is
	StrMap gir_emitters
	StrMap locals_maps
	StrMap ssa_map
	StrMap types_map
	StrMap string_literals
	File   fd
	cstr   current_method
	int    ssa_count
	List   cached_globals
	cstr   quote
	Project p

	function(File fd, Project p) LLVMEmitter::new -> LLVMEmitter does
		LLVMEmitter new = malloc(@sizeof(LLVMEmitter)@)|LLVMEmitter
		new.p=p

		int ssa_guess=0
		int j=0
		while j<p.methods:num_keys() do
			ssa_guess+=(p.methods:get_by_num(j)|Method).gir_code.len
			j+=1
		done

		new.gir_emitters=StrMap::new()
		new.locals_maps=StrMap::new_sized(p.methods:num_keys()*2)
		new.ssa_map=StrMap::new_sized(ssa_guess*3)
		new.types_map=StrMap::new_sized(p.types:num_keys()*2)
		new.cached_globals=List::new()
		new.string_literals=StrMap::new()

		new.quote=malloc(2)
		new.quote[0]=34|byte
		new.quote[1]=0|byte

		new.ssa_count=0

		new.types_map:set("int", "i32")
		new.types_map:set("short", "i16")
		new.types_map:set("byte", "i8")
		new.types_map:set("long", "i64")
		new.types_map:set("xlong", "i128")
		
		new.types_map:set("uint", "i32")
		new.types_map:set("ushort", "i16")
		new.types_map:set("ubyte", "i8")
		new.types_map:set("ulong", "i64")
		new.types_map:set("uxlong", "i128")

		new.types_map:set("bool", "i1")

		new.types_map:set("float", "double")

		new.types_map:set("ptr", "i8*")
		new.types_map:set("cstr", "i8*")

		new.types_map:set("void", "void")

		new.fd=fd
		new.current_method="???"
	return new

	function(LLVMEmitter self, cstr text) LLVMEmitter:cache_global_stmt -> void does
		self.cached_globals:append(text)
	return

	function(LLVMEmitter self, cstr text) LLVMEmitter:make_string_global -> cstr does
		if -self.string_literals:contains(text) do
			self.string_literals:set(text, "@strG_"+self:get_next_ssa():str())
			cstr str_type=llvm::make_string_type(text)

			self:cache_global_stmt(self.string_literals:get(text)|cstr+" = private unnamed_addr constant "+str_type+" c"+self.quote\
			+llvm::encode_literal(text)+"\\00"+self.quote)
		done
	return self.string_literals:get(text)
		
	function(LLVMEmitter self) LLVMEmitter:emit_cached_globals -> void does
		int i=0
		while i<self.cached_globals.len do
			self:emitl(self.cached_globals:get(i))
			i+=1
		done
	return

	function(LLVMEmitter self) LLVMEmitter:get_next_ssa -> int does
		self.ssa_count+=1
	return self.ssa_count

	function(LLVMEmitter self, cstr gir_type, LLVMGIREmitter e) LLVMEmitter:register_emitter -> LLVMEmitter does
		self.gir_emitters:set(gir_type, e|ptr)
	return self

	function(LLVMEmitter self, cstr gir_type) LLVMEmitter:get_emitter -> LLVMGIREmitter does
	return self.gir_emitters:get(gir_type)|LLVMGIREmitter

	function(LLVMEmitter self, GIRInst i) LLVMEmitter:emit_inst -> void does
		self:get_emitter(i._gir_ty.name)(i, self)
	return

	function(LLVMEmitter self, cstr text) LLVMEmitter:emit -> void does
		self.fd:write(text)
		# printf("LLVM Emit :%s\n", text)
	return

	function(LLVMEmitter self, cstr text) LLVMEmitter:emitl -> void does
		self.fd:write(text)
		self.fd:write("\n")
		# printf("LLVM Emitl:%s\n", text)
	return

	function(LLVMEmitter self, cstr name) LLVMEmitter:enter_method -> LLVMEmitter does
		self.current_method=name
		self.locals_maps:set(name, StrMap::new_sized(self.p:get_Method(name).gir_code.len*2)|ptr)
	return self

	function(LLVMEmitter self, cstr name) LLVMEmitter:get_local_addr_var -> cstr does
	return (self.locals_maps:get(self.current_method)|StrMap):get(name)

	function(LLVMEmitter self, cstr name, cstr llvm_name) LLVMEmitter:set_local_addr_var -> void does
		(self.locals_maps:get(self.current_method)|StrMap):set(name, llvm_name)
	return

	function(LLVMEmitter self, GIRVar name) LLVMEmitter:get_ssa_var -> cstr does
	return self.ssa_map:get(name.idname) #TODO:Horrible!

	function(LLVMEmitter self, GIRVar name, cstr llvm_name) LLVMEmitter:set_ssa_var -> void does
		self.ssa_map:set(name.idname, llvm_name)
	return

	function(LLVMEmitter self, GIRVar var) LLVMEmitter:get_vty -> cstr does
		if var.is_ref do
			return (self.types_map:get(var.type_.name)|cstr)+"*"
		done
	return self.types_map:get(var.type_.name)

	function(LLVMEmitter self, OType ty) LLVMEmitter:get_ty -> cstr does
	return self.types_map:get(ty.name)
endtype
