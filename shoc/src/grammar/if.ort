type IfExprHead is packed
	NodeType type_
	Token anchor
	Node condition
	bool is_elif

	function(IfExprHead node, int depth) IfExprHead::print -> void does
		printf("IfExprHead: Is_Elif:%i, Condition=", node.is_elif|int)
		node.condition:print(depth+1)
	return

	function(EleList eles) IfExprHead::create -> IfExprHead does
		IfExprHead new = malloc(@sizeof(IfExprHead)@)|IfExprHead
		new.condition=eles:get(1):n()
		new.is_elif=eles:get(0):t():is_a("T_ELIF")
		new.anchor=eles:get(0):t()
	return new

	function(EleList eles) IfExprHead::match -> int does
		if (-eles:get(0).is_token):or(\
		     eles:get(1).is_token):or(\
		    -eles:get(2).is_token) do
			return 0
		done

		if (-(eles:get(0):t().type_.name=="T_IF"):or(eles:get(0):t().type_.name=="T_ELIF")):or(\
			eles:get(2):t().type_.name!="T_DO"):or(\
		   -eles:get(1):n():is_a("ValueExpression")) do
			return 0
		done
	return 3

	function() IfExprHead::impl -> void does
		IfExprHead_t = NodeType::new("IfExprHead")\
					:set_printer(IfExprHead::print |NodePrinter)\
					:set_creator(IfExprHead::create|NodeCreator)\
					:set_matcher(IfExprHead::match |NodeMatcher)\
					:matches(3)
	return
endtype

NodeType IfExprHead_t



type IfExpr is packed
	NodeType type_
	Token anchor
	Node condition
	bool is_elif
	BlockBody body

	function(IfExpr node, int depth) IfExpr::print -> void does
		printf("IfExpr:\n")
		parse::indent(depth+1)
		printf("|- Condition: ")
		(node.condition|Node):print(depth+2)
		parse::indent(depth+1)
		printf("|- Body: ")
		(node.body|Node):print(depth+2)
	return

	function(Node condition, bool is_elif, BlockBody body, Token anchor) IfExpr::create_raw -> IfExpr does
		IfExpr new = malloc(@sizeof(IfExpr)@)|IfExpr
		new.type_=IfExpr_t
		new.condition=condition
		new.is_elif=is_elif
		new.body=body
		new.anchor=anchor
	return new

	function(EleList eles) IfExpr::create -> IfExpr does
		IfExprHead head = (eles:get(0):n()|IfExprHead)
	return IfExpr::create_raw(head.condition, head.is_elif, eles:get(1):n()|BlockBody, head.anchor)

	function(EleList eles) IfExpr::match -> int does
		if (-eles:get(0):n():is_a("IfExprHead")):or(\
		    -eles:get(1):n():is_a("BlockBody")) do
			return 0
		done
	return 2

	function(IfExpr n, TransformerPass p) IfExpr::visit -> void does
		n.condition=p:visit(n.condition)
		n.body=p:visit(n.body|Node)|BlockBody
	return

	function(IfExpr self) IfExpr::copy -> Node does
	return IfExpr::create_raw(self.condition:copy(), self.is_elif, self.body|Node:copy()|BlockBody, self.anchor)|Node

	function() IfExpr::impl -> void does
		IfExpr_t = NodeType::new("IfExpr")\
					:set_printer(IfExpr::print |NodePrinter)\
					:set_creator(IfExpr::create|NodeCreator)\
					:set_matcher(IfExpr::match |NodeMatcher)\
					:set_visitor(IfExpr::visit |NodeVisitor)\
					:set_tcopier(IfExpr::copy  |NodeTCopier)\
					:matches(2):matches_only_nodes():addtype("Expression")
	return
endtype

NodeType IfExpr_t
