type BlockBody is packed
	NodeType type_
	List statements
	bool has_runoff_clause
	Node runoff_clause

	function(BlockBody node, int depth) BlockBody::print -> void does
		printf("BlockBody: (N_Statements=%i)\n", node.statements.len)
		int i=0
		while i<node.statements.len do
			parse::indent(depth)
			printf("|%i- ", i)
			node.statements:get_Node(i):print(depth+1)
			i+=1
		done

		parse::indent(depth-1)
		if node.has_runoff_clause do
			printf("\\-- Runoff Clause: ")
			node.runoff_clause:print(depth)
		done
	return

	function(List nodes) BlockBody::create_direct -> Node does
		BlockBody new = malloc(@sizeof(BlockBody)@)|BlockBody
		new.type_=parse::type_by_name("BlockBody")
		new.statements=nodes
		new.has_runoff_clause=false
	return new|Node

	function(EleList eles) BlockBody::create -> BlockBody does
		BlockBody new = malloc(@sizeof(BlockBody)@)|BlockBody
		int matchnum=BlockBody::match(eles)
		if matchnum==2 do
			if -eles:get(1).is_token do
				if -(eles:get(1):n():is_a("BlockBody"):or(eles:get(1):n():is_a("IfExpr"))) do
					shoc::bail_out("BlockBody matched against thing of len 2 of which [1] was a node but not a BlockBody")
				done
				if eles:get(1):n():is_a("IfExpr") do
					if -(eles:get(1):n()|IfExpr).is_elif do
						new.has_runoff_clause=false
						new.runoff_clause=null|Node
						new.statements=List::new()
						new.statements:append_Node(eles:get(1):n())
						return new
					done
				done
				new.statements=List::new()
				new.has_runoff_clause=true
				new.runoff_clause=eles:get(1):n()
			else do
				new.statements=List::new()
				new.has_runoff_clause=false
				new.runoff_clause=null|Node
			done
		elif matchnum==3 do
			BlockBody old = eles:get(2):n()|BlockBody
			new.has_runoff_clause=old.has_runoff_clause
			new.runoff_clause=old.runoff_clause
			new.statements=old.statements
			new.statements:insert(0, eles:get(1):n()|ptr)
		else do #4
			new.has_runoff_clause=true
			new.runoff_clause=eles:get(3):n()
			new.statements=List::new()
		done
	return new

	function(EleList eles) BlockBody::match -> int does
		if eles:get(0).is_token do
			return 0
		done

		if -eles:get(0):n():is_a("SepExpr") do
			return 0
		done

		if eles:get(1).is_token do
			if eles:get(1):t():is_a("T_DONE") do
				return 2
			elif eles:in_slice()>2 do
				if eles:get(1).is_token & eles:get(2).is_token do
					if eles:get(1):t():is_a("T_ELSE") & eles:get(2):t():is_a("T_DO") do
						return 4
					done
				done
			done
		elif eles:get(1):n():is_a("BlockBody") do
			return 2
		elif (-eles:get(1).is_token) do
			if eles:get(1):n():is_a("IfExpr") do
				if (eles:get(1):n()|IfExpr).is_elif do
					return 2
				done
			done
			if eles:in_slice()>2 do
				if  (-eles:get(2).is_token) do
					if eles:get(1):n():is_a("Expression") &\
					   (eles:get(2):n():is_a("BlockBody")) do
					   return 3
					done
				done
			done
		done
	return 0

	function(BlockBody n, TransformerPass p) BlockBody::visit -> void does
		int i=0
		Node res
		while i<n.statements.len do
			res=p:visit(n.statements:get_Node(i))
			if res|ptr==null do
				n.statements:del(i)
			else do
				n.statements:set(i, res|ptr)
			done
			i+=1
		done
		if n.has_runoff_clause do
			Node runoff=p:visit(n.runoff_clause)
			if runoff|ptr==null do
				n.has_runoff_clause=false
			else do
				n.runoff_clause=runoff
			done
		done
	return

	function() BlockBody::impl -> NodeType does
	return NodeType::new("BlockBody")\
					:set_printer(BlockBody::print |NodePrinter)\
					:set_creator(BlockBody::create|NodeCreator)\
					:set_matcher(BlockBody::match |NodeMatcher)\
					:set_visitor(BlockBody::visit |NodeVisitor)\
					:matches(2)
endtype
