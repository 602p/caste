type WhileExpr is packed
	NodeType type_
	Node condition
	BlockBody body
	Token anchor

	function(WhileExpr node, int depth) WhileExpr::print -> void does
		printf("WhileExpr:\n")
		parse::indent(depth+1)
		printf("|- Condition: ")
		(node.condition):print(depth+2)
		parse::indent(depth+1)
		printf("|- Body: ")
		(node.body|Node):print(depth+2)
	return

	function(EleList eles) WhileExpr::create -> WhileExpr does
		WhileExpr new = malloc(@sizeof(WhileExpr)@)|WhileExpr
		new.condition=eles:get(1):n()
		new.body=eles:get(3):n()|BlockBody
		new.anchor=eles:get(0):t()
	return new

	function(Node cond, BlockBody body, Token anchor) WhileExpr::create_direct -> WhileExpr does
		WhileExpr new = malloc(@sizeof(WhileExpr)@)|WhileExpr
		new.type_=WhileExpr_t
		new.condition=cond
		new.body=body
		new.anchor=anchor
	return new

	function(EleList eles) WhileExpr::match -> int does
		if (-eles:get(0).is_token):or(\
		    -eles:get(2).is_token):or(\
		     eles:get(1).is_token):or(\
		     eles:get(3).is_token) do
			return 0
		done

		if (-eles:get(0):t():is_a("T_WHILE")):or(\
			-eles:get(2):t():is_a("T_DO")):or(\
			-eles:get(1):n():is_a("ValueExpression")):or(\
			-eles:get(3):n():is_a("BlockBody")) do
			return 0
		done
	return 4

	function(WhileExpr n, TransformerPass p) WhileExpr::visit -> void does
		n.condition=p:visit(n.condition)
		n.body=p:visit(n.body|Node)|BlockBody
	return

	function(WhileExpr self) WhileExpr::copy -> Node does
	return WhileExpr::create_direct(self.condition:copy(), self.body|Node:copy()|BlockBody, self.anchor)|Node

	function() WhileExpr::impl -> void does
		WhileExpr_t = NodeType::new("WhileExpr")\
					:set_printer(WhileExpr::print |NodePrinter)\
					:set_creator(WhileExpr::create|NodeCreator)\
					:set_matcher(WhileExpr::match |NodeMatcher)\
					:set_visitor(WhileExpr::visit |NodeVisitor)\
					:set_tcopier(WhileExpr::copy  |NodeTCopier)\
					:matches(4):addtype("Expression")
	return
endtype

NodeType WhileExpr_t