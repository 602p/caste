type SepExpr is packed
	NodeType type_
	int consumed

	function(SepExpr node, int depth) SepExpr::print -> void does
		printf("SepExpr (Consumed=%i)\n", node.consumed)
	return

	function(int consumed) SepExpr::create_raw -> SepExpr does
		SepExpr new = malloc(@sizeof(SepExpr)@)|SepExpr
		new.type_=SepExpr_t
		new.consumed=consumed
	return new

	function(EleList eles) SepExpr::create -> SepExpr does
		SepExpr new = SepExpr::create_raw(0)
		new.consumed=1
		if eles:in_slice()>1 do
			if eles:get(1).is_token do
				if eles:get(1):t():is_a("T_ENDOFSTATEMENT") do
					if -eles:get(0).is_token do
						if eles:get(0):n():is_a("SepExpr") do
							new.consumed=(eles:get(0):n()|SepExpr).consumed+1
						done
					done
				done
			done
		done
	return new

	function(EleList eles) SepExpr::match -> int does
		if eles:in_slice()>1 do
			if eles:get(1).is_token do
				if eles:get(1):t():is_a("T_ENDOFSTATEMENT") do
					if -eles:get(0).is_token do
						if eles:get(0):n():is_a("SepExpr") do
							return 2
						done
					done
				done
			done
		done

		if (-eles:get(0).is_token) do
			return 0
		done

		if (eles:get(0):t().type_.name!="T_ENDOFSTATEMENT") do
			return 0
		done

		if eles:has_lookahead() do  #special-case to allow the builtin EOS to match
			if eles:get_lookahead().is_token do
				if eles:get_lookahead():t():is_a("T_ENDOFSTATEMENT")do
					return 0 #Don't match the last in a series of ends, wait for the first and collapse them all
				done
			done
		done
	return 1

	function(SepExpr self) SepExpr::copy -> Node does
	return SepExpr::create_raw(self.consumed)|Node

	function() SepExpr::impl -> void does
		SepExpr_t = NodeType::new("SepExpr")\
					:set_printer(SepExpr::print |NodePrinter)\
					:set_creator(SepExpr::create|NodeCreator)\
					:set_matcher(SepExpr::match |NodeMatcher)\
					:set_tcopier(SepExpr::copy  |NodeTCopier)\
					:matches(1):addtype("Expression")
	return
endtype

NodeType SepExpr_t