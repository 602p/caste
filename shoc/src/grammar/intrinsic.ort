type IntrinsicExpr is packed
	NodeType type_
	Token anchor
	Node value

	function(IntrinsicExpr node, int depth) IntrinsicExpr::print -> void does
		printf("IntrinsicExpr: ")
		node.value:print(depth)
	return

	function(Node value, Token anchor) IntrinsicExpr::create_direct -> IntrinsicExpr does
		IntrinsicExpr new = malloc(@sizeof(IntrinsicExpr)@)|IntrinsicExpr
		new.type_=IntrinsicExpr_t
		new.value=value
		new.anchor=anchor
	return new

	function(EleList eles) IntrinsicExpr::create -> IntrinsicExpr does
	return IntrinsicExpr::create_direct(eles:get(1):n(), eles:get(0):t())

	function(EleList eles) IntrinsicExpr::match -> int does
		if eles:get(1).is_token do
			return 0
		done

		if -eles:get(0).is_token do
			return 0
		done

		if -(eles:get(1):n():is_a("CallExpr"):or(eles:get(1):n():is_a("NameExpr"))) do
			return 0
		done

		if eles:get(0):t().type_.name=="T_INTRINSIC" do
			if eles:get(2).is_token do
				if eles:get(2):t().type_.name=="T_INTRINSIC" do
					eles.proj:cond_warn_in_token("warn_style", "Unnececary 2nd @ in intrinsic", eles:get(2):t())
					return 3
				done
			done
			return 2
		done
	return 0

	function(IntrinsicExpr self) IntrinsicExpr::copy -> IntrinsicExpr does
	return IntrinsicExpr::create_direct(self.value:copy(), self.anchor)

	function(IntrinsicExpr n, TransformerPass p) IntrinsicExpr::visit -> void does
		n.value=p:visit(n.value)
	return

	function() IntrinsicExpr::impl -> void does
		IntrinsicExpr_t = NodeType::new("IntrinsicExpr")\
					:set_printer(IntrinsicExpr::print |NodePrinter)\
					:set_creator(IntrinsicExpr::create|NodeCreator)\
					:set_matcher(IntrinsicExpr::match |NodeMatcher)\
					:set_visitor(IntrinsicExpr::visit |NodeVisitor)\
					:set_tcopier(IntrinsicExpr::copy  |NodeTCopier)\
					:matches(2):addtype("ValueExpression")
	return
endtype

NodeType IntrinsicExpr_t