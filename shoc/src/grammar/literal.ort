type LiteralExpr is packed
	NodeType type_
	cstr value
	cstr value_type

	function(LiteralExpr node, int depth) LiteralExpr::print -> void does
		printf("LiteralExpr: type=%s, value=%s\n", node.value_type, node.value)
	return

	function(EleList eles) LiteralExpr::create -> LiteralExpr does
		LiteralExpr new = malloc(@sizeof(LiteralExpr)@)|LiteralExpr
		new.value=eles:get(0):t().text
		if eles:get(0):t().type_.name=="T_INT_LITERAL" do
			new.value_type="int"
		elif eles:get(0):t().type_.name=="T_FLOAT_LITERAL" do
			new.value_type="float"
		elif eles:get(0):t().type_.name=="T_NULL_LITERAL" do
			new.value_type="ptr"
			new.value="0"
		elif eles:get(0):t().type_.name=="T_BOOL_LITERAL" do
			new.value_type="bool"
			new.value=(eles:get(0):t().text=="true"):str()
		else do
			new.value_type="cstr"
			new.value=new.value:substr(1, new.value:len()-2)
		done
	return new

	function(Project p, cstr value_type, cstr value) LiteralExpr::create_direct -> Node does
		LiteralExpr new = malloc(@sizeof(LiteralExpr)@)|LiteralExpr
		new.value=value
		new.value_type=value_type
		new.type_=p:type_by_name("LiteralExpr")
	return new|Node

	function(Project p, int value) LiteralExpr::create_direct_int -> Node does
	return LiteralExpr::create_direct(p, "int", value:str())

	function(Project p, bool value) LiteralExpr::create_direct_bool -> Node does
	return LiteralExpr::create_direct(p, "bool", value:str())

	function(Project p, float value) LiteralExpr::create_direct_float -> Node does
	return LiteralExpr::create_direct(p, "float", value:str())

	function(EleList eles) LiteralExpr::match -> int does
	return ((eles:get(0):t().type_.name=="T_INT_LITERAL")+\
		    (eles:get(0):t().type_.name=="T_FLOAT_LITERAL")+\
		    (eles:get(0):t().type_.name=="T_BOOL_LITERAL")+\
		    (eles:get(0):t().type_.name=="T_NULL_LITERAL")+\
		    (eles:get(0):t().type_.name=="T_STRING_LITERAL"))|int

	function() LiteralExpr::impl -> NodeType does
	return NodeType::new("LiteralExpr")\
					:set_printer(LiteralExpr::print |NodePrinter)\
					:set_creator(LiteralExpr::create|NodeCreator)\
					:set_matcher(LiteralExpr::match |NodeMatcher)\
					:matches(1):matches_only_tokens():addtype("ValueExpression")
endtype
