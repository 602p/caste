import "grammar/access.ort"
import "grammar/assignment.ort"
import "grammar/binop.ort"
import "grammar/blockbody.ort"
import "grammar/call.ort"
import "grammar/cast.ort"
import "grammar/fdecl.ort"
import "grammar/fdecl_arglist.ort"
import "grammar/grouping.ort"
import "grammar/if.ort"
import "grammar/import.ort"
import "grammar/index.ort"
import "grammar/intrinsic.ort"
import "grammar/literal.ort"
import "grammar/name.ort"
import "grammar/return.ort"
import "grammar/sep.ort"
import "grammar/tuple.ort"
import "grammar/typedecl.ort"
import "grammar/unop.ort"
import "grammar/while.ort"
import "grammar/for.ort"
import "grammar/file.ort"

function(List l) grammar::install -> void does
	l:append_NodeType(NameExpr::impl())
	l:append_NodeType(DeclExpr::impl())
	l:append_NodeType(AccessorExpr::impl())

	l:append_NodeType(LiteralExpr::impl())
	
	l:append_NodeType(GroupingExpr::impl())
	l:append_NodeType(BinOpExpr::impl())
	l:append_NodeType(UnOpExpr::impl())
	l:append_NodeType(CastExpr::impl())
	l:append_NodeType(IndexExpr::impl())

	l:append_NodeType(CallExpr::impl())

	l:append_NodeType(AssignmentExpr::impl())
	l:append_NodeType(ReturnExpr::impl())

	l:append_NodeType(TupleEndFragment::impl())
	l:append_NodeType(TupleMidFragment::impl())
	l:append_NodeType(Tuple::impl())
	l:append_NodeType(ZeroTuple::impl())

	l:append_NodeType(ZeroArgList::impl())
	l:append_NodeType(VarArgsList::impl())
	l:append_NodeType(OneArgList::impl())
	l:append_NodeType(MultiArgListStart::impl())
	l:append_NodeType(MultiArgListExt::impl())
	l:append_NodeType(MultiArgList::impl())
	l:append_NodeType(FunctionDeclHead::impl())

	l:append_NodeType(FunctionBody::impl())
	l:append_NodeType(FunctionDecl::impl())

	l:append_NodeType(IfExprHead::impl())
	l:append_NodeType(IfExpr::impl())
	l:append_NodeType(WhileExpr::impl())
	l:append_NodeType(ForExpr::impl())
	l:append_NodeType(BlockBody::impl())

	l:append_NodeType(IntrinsicExpr::impl())
	l:append_NodeType(ImportStmt::impl())

	l:append_NodeType(TypeDeclHead::impl())
	l:append_NodeType(TypeDeclBody::impl())
	l:append_NodeType(TypeDecl::impl())

	l:append_NodeType(SepExpr::impl())

	l:append_NodeType(OneTuple::impl()) #Fallback matching case for one-arg function calls

	l:append_NodeType(FileNode::impl())
return