type NameExpr is packed
	NodeType type_
	Token anchor
	cstr name

	function(NameExpr node, int depth) NameExpr::print -> void does
		printf("NameExpr: '%s'\n", node.name)
	return

	function(EleList eles) NameExpr::create -> NameExpr does
		NameExpr new = malloc(@sizeof(NameExpr)@)|NameExpr
		new.name=eles:get(0):t().text
		new.anchor=eles:get(0):t()
	return new

	function(cstr name, Token anchor) NameExpr::create_direct -> NameExpr does
		NameExpr new = malloc(@sizeof(NameExpr)@)|NameExpr
		new.type_=NameExpr_t
		new.name=name
		new.anchor=anchor
		int i=0
		while new.name[i]==bord(" ") do
			i+=1
		done
		new.name=new.name:offset(i)
	return new

	function(EleList eles) NameExpr::match -> int does
	return (eles:get(0):t().type_.name=="T_NAME")|int

	function(NameExpr self) NameExpr::copy -> Node does
	return NameExpr::create_direct(self.name, self.anchor)|Node

	function() NameExpr::impl -> void does
		NameExpr_t = NodeType::new("NameExpr")\
					:set_printer(NameExpr::print |NodePrinter)\
					:set_creator(NameExpr::create|NodeCreator)\
					:set_matcher(NameExpr::match |NodeMatcher)\
					:set_tcopier(NameExpr::copy  |NodeTCopier)\
					:matches(1):matches_only_tokens():addtype("IdentifierExpression")
	return
endtype

NodeType NameExpr_t



type DeclExpr is packed
	NodeType type_
	Token anchor
	cstr name

	function(DeclExpr node, int depth) DeclExpr::print -> void does
		printf("DeclExpr: '%s'\n", node.name)
	return

	function(cstr name, Token anchor) DeclExpr::create_direct -> DeclExpr does
		DeclExpr new = malloc(@sizeof(DeclExpr)@)|DeclExpr
		new.type_=DeclExpr_t
		new.name=name
		new.anchor=anchor
	return new

	function(EleList eles) DeclExpr::create -> DeclExpr does
	return DeclExpr::create_direct(eles:get(0):t().text, eles:get(0):t())

	function(EleList eles) DeclExpr::match -> int does
	return (eles:get(0):t().type_.name=="T_VAR_DECL")|int

	function(DeclExpr self) DeclExpr::copy -> Node does
	return DeclExpr::create_direct(self.name, self.anchor)|Node

	function() DeclExpr::impl -> void does
		DeclExpr_t = NodeType::new("DeclExpr")\
					:set_printer(DeclExpr::print |NodePrinter)\
					:set_creator(DeclExpr::create|NodeCreator)\
					:set_matcher(DeclExpr::match |NodeMatcher)\
					:set_tcopier(DeclExpr::copy  |NodeTCopier)\
					:matches(1):matches_only_tokens():addtype("IdentifierExpression")
	return
endtype

NodeType DeclExpr_t