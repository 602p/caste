type NameExpr is packed
	NodeType type_
	cstr name

	function(NameExpr node, int depth) NameExpr::print -> void does
		printf("NameExpr: '%s'\n", node.name)
	return

	function(EleList eles) NameExpr::create -> NameExpr does
		NameExpr new = malloc(@sizeof(NameExpr)@)|NameExpr
		new.name=eles:get(0):t().text
	return new

	function(EleList eles) NameExpr::match -> int does
	return (eles:get(0):t().type_.name=="T_NAME")|int

	function() NameExpr::impl -> NodeType does
	return NodeType::new("NameExpr")\
					:set_printer(NameExpr::print |NodePrinter)\
					:set_creator(NameExpr::create|NodeCreator)\
					:set_matcher(NameExpr::match |NodeMatcher)\
					:matches(1):matches_only_tokens():addtype("IdentifierExpression")
endtype

type DeclExpr is packed
	NodeType type_
	cstr name

	function(DeclExpr node, int depth) DeclExpr::print -> void does
		printf("DeclExpr: '%s'\n", node.name)
	return

	function(EleList eles) DeclExpr::create -> DeclExpr does
		DeclExpr new = malloc(@sizeof(DeclExpr)@)|DeclExpr
		new.name=eles:get(0):t().text
	return new

	function(EleList eles) DeclExpr::match -> int does
	return (eles:get(0):t().type_.name=="T_VAR_DECL")|int

	function() DeclExpr::impl -> NodeType does
	return NodeType::new("DeclExpr")\
					:set_printer(DeclExpr::print |NodePrinter)\
					:set_creator(DeclExpr::create|NodeCreator)\
					:set_matcher(DeclExpr::match |NodeMatcher)\
					:matches(1):matches_only_tokens():addtype("IdentifierExpression")
endtype
