type NameExpr is packed
	NodeType type_
	Token anchor
	cstr name

	function(NameExpr node, int depth) NameExpr::print -> void does
		printf("NameExpr: '%s'\n", node.name)
	return

	function(EleList eles) NameExpr::create -> NameExpr does
		NameExpr new = malloc(@sizeof(NameExpr)@)|NameExpr
		new.name=eles:get(0):t().text
		new.anchor=eles:get(0):t()
	return new

	function(Project p, cstr name, Token anchor) NameExpr::create_direct -> NameExpr does
		NameExpr new = malloc(@sizeof(NameExpr)@)|NameExpr
		new.type_=p:type_by_name("NameExpr")
		new.name=name
		new.anchor=anchor
		int i=0
		while new.name[i]==bord(" ") do
			i+=1
		done
		new.name=new.name:offset(i)
	return new

	function(EleList eles) NameExpr::match -> int does
		if eles:has_lookahead() do
			if eles:get_lookahead():t():is_a("T_NAME") do
				return 0
			done
			if eles:get_lookahead():t():is_a("T_PTYPE_CLOSE") do
				return 0
			done
		done
	return (eles:get(0):t().type_.name=="T_NAME")|int

	function() NameExpr::impl -> NodeType does
	return NodeType::new("NameExpr")\
					:set_printer(NameExpr::print |NodePrinter)\
					:set_creator(NameExpr::create|NodeCreator)\
					:set_matcher(NameExpr::match |NodeMatcher)\
					:matches(1):matches_only_tokens():addtype("IdentifierExpression"):addtype("TypeName")
endtype

type DeclExpr is packed
	NodeType type_
	Token anchor
	Node d_type
	cstr d_name

	function(DeclExpr node, int depth) DeclExpr::print -> void does
		printf("DeclExpr: '%s'\n", node.d_name)
		parse::indent(depth+1)
		printf("\\-Type: ")
		node.d_type:print(depth+1)
	return

	function(EleList eles) DeclExpr::create -> DeclExpr does
		DeclExpr new = malloc(@sizeof(DeclExpr)@)|DeclExpr
		new.d_type=eles:get(0):n()
		new.d_name=eles:get(1):t().text
		new.anchor=eles:get(0):n()|NameExpr.anchor
	return new

	function(EleList eles) DeclExpr::match -> int does
		if -eles:get(0).is_token do
			if eles:get(0):n():is_a("TypeName") do
				if eles:get(1).is_token do
					if eles:get(1):t():is_a("T_NAME") do
						return 2
					done
				done
			done
		done
	return 0

	function(DeclExpr self, Project p) DeclExpr:make_TypedVar -> TypedVar does
	return TypedVar::new(self.d_name, p:resolve_TypeName(self.d_type))

	function() DeclExpr::impl -> NodeType does
	return NodeType::new("DeclExpr")\
					:set_printer(DeclExpr::print |NodePrinter)\
					:set_creator(DeclExpr::create|NodeCreator)\
					:set_matcher(DeclExpr::match |NodeMatcher)\
					:matches(2):addtype("IdentifierExpression")
endtype
