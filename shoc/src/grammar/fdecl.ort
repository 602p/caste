type FunctionDeclHead is packed
	NodeType type_
	List args #List of DeclExprs
	bool varargs
	bool is_extern
	NameExpr name
	cstr ret_type
	Token anchor

	function(FunctionDeclHead self) FunctionDeclHead:is_generic -> bool does
	return self.name|Node:is_a("GenericName")

	function(FunctionDeclHead self) FunctionDeclHead:get_strname -> cstr does
		shoc::assert(-self:is_generic(), "Can't get_strname for a generic function")
		if self.name|Node:is_a("AccessorExpr") do
			if self.name|AccessorExpr.mode==":" do
				return self.name|AccessorExpr.object|NameExpr.name + "$" + shoc::mangle_name(self.name|AccessorExpr.field)
			else do
				return self.name|AccessorExpr.object|NameExpr.name + "$$" + shoc::mangle_name(self.name|AccessorExpr.field)
			done
		done
	return self.name.name

	function(FunctionDeclHead node, int depth) FunctionDeclHead::print -> void does
		printf("FunctionDeclHead: type=%s, Nargs=%i", node.ret_type, node.args.len)
		if node.varargs do
			printf("...varargs")
		done
		if node.is_extern do
			printf(" (external linkage)")
		done
		printf(": ")
		node.name|Node:print(depth+1)

		int i=0
		while i<node.args.len do
			parse::indent(depth+1)
			if i==node.args.len-1 do
				printf("\\%i- ", i)
				node.args:get_Node(i):print(depth+1)
			else do
				printf("|%i- ", i)
				node.args:get_Node(i):print(depth+1)
			done
			i+=1
		done
	return

	function(NameExpr name, cstr ret_type, bool is_extern, bool is_varargs, List args, Token anchor) FunctionDeclHead::create_raw -> FunctionDeclHead does
		FunctionDeclHead new = malloc(@sizeof(FunctionDeclHead)@)|FunctionDeclHead
		new.name=name
		new.ret_type=ret_type
		new.is_extern=is_extern
		new.varargs=is_varargs
		new.args=args
		new.anchor=anchor
		new.type_=FunctionDeclHead_t
	return new

	function(EleList eles) FunctionDeclHead::create -> FunctionDeclHead does
		Node args = eles:get(1):n()
		List args_list
		bool varargs=false
		if args:is_a("ZeroTuple") do
			args_list=List::new()
		elif args:is_a("GroupingExpr") do
			args_list=List::new()
			Node c = (eles:get(1):n()|GroupingExpr).contents
			if c:is_a("LiteralExpr") do
				if c|LiteralExpr.value=="..." do
					varargs=true
				done
			done
			if -varargs do
				args_list:append_Node(c)
			done
		elif args:is_a("Tuple") do
			args_list=(eles:get(1):n()|Tuple).elements
		done
		int i=0
		while i<args_list.len do
			shoc::assert(args_list:get_Node(i):is_a("DeclExpr"), "Function with non-declexpr args")
			i+=1
		done
	return FunctionDeclHead::create_raw(eles:get(2):n()|NameExpr, eles:get(4):t().text, eles:get(0):t():is_a("T_FUNCTIONDECL_EXTERN"),\
										 varargs, args_list, eles:get(0):t())

	function(EleList eles) FunctionDeclHead::match -> int does
		#T_FUNCTIONDECL ArgList T_FUNCTIONDECL_NAME T_FUNCTIONDECL_RETURN T_FUNCTIONDECL_RETURN_TY
		#...T_FUNCTIONDECL_DOES
		
		if (-eles:get(0).is_token):or(\
			 eles:get(1).is_token):or(\
			 eles:get(2).is_token):or(\
			-eles:get(3).is_token):or(\
			-eles:get(4).is_token) do
			return 0
		done
		

		if eles:get(0):t():is_a("T_FUNCTIONDECL_EXTERN") do
			if (eles:get(1):n():is_a("Tuple"):or(eles:get(1):n():is_a("GroupingExpr")))&(\
		     eles:get(2):n():is_a("NameExpr"):or(eles:get(2):n():is_a("AccessorExpr")))&(\
		     eles:get(3):t():is_a("T_FUNCTIONDECL_RETURN"))&(\
		     eles:get(4):t():is_a("T_FUNCTIONDECL_RETURN_TY")) do
		    	return 5
		    done
		done
		

		if -eles:get(5).is_token do
			return 0
		done
		

		if (-eles:get(0):t():is_a("T_FUNCTIONDECL")):or(\
		    -(eles:get(1):n():is_a("Tuple"):or(eles:get(1):n():is_a("GroupingExpr")))):or(\
		    -(eles:get(2):n():is_a("NameExpr"):or(eles:get(2):n():is_a("AccessorExpr")))):or(\
		    -eles:get(3):t():is_a("T_FUNCTIONDECL_RETURN")):or(\
		    -eles:get(4):t():is_a("T_FUNCTIONDECL_RETURN_TY")):or(\
		    -eles:get(5):t():is_a("T_FUNCTIONDECL_DOES")) do
			return 0
		done
		
	return 6

	function(FunctionDeclHead self) FunctionDeclHead::copy -> FunctionDeclHead does
		List new_args = List::new()
		int i=0
		while i<self.args.len do
			new_args:append_Node(self.args:get_Node(i):copy())
			i+=1
		done
	return FunctionDeclHead::create_raw(self.name, self.ret_type, self.is_extern, self.varargs, new_args, self.anchor)

	function() FunctionDeclHead::impl -> void does
		FunctionDeclHead_t = NodeType::new("FunctionDeclHead")\
					:set_printer(FunctionDeclHead::print |NodePrinter)\
					:set_creator(FunctionDeclHead::create|NodeCreator)\
					:set_matcher(FunctionDeclHead::match |NodeMatcher)\
					:set_tcopier(FunctionDeclHead::copy  |NodeTCopier)\
					:matches(5)
	return
endtype

NodeType FunctionDeclHead_t



type FunctionBody is packed
	NodeType type_
	List statements

	function(FunctionBody node, int depth) FunctionBody::print -> void does
		printf("FunctionBody: (N_Statements=%i)\n", node.statements.len)
		int i=0
		while i<node.statements.len do
			parse::indent(depth+1)
			if i==node.statements.len-1 do
				printf("\\%i- ", i)
				node.statements:get_Node(i):print(depth)
			else do
				printf("|%i- ", i)
				node.statements:get_Node(i):print(depth+2)
			done
			i+=1
		done
	return

	function(EleList eles) FunctionBody::create -> FunctionBody does
		FunctionBody new = malloc(@sizeof(FunctionBody)@)|FunctionBody
		if eles:in_slice()>2 do
			if eles:get(1):n():is_a("Expression") do
				if -eles:get(2).is_token do
					if eles:get(2):n():is_a("FunctionBody") do
						new.statements=(eles:get(2):n()|FunctionBody).statements
						new.statements:insert(0, eles:get(1):n()|ptr)
					done
				done
			done
		done
		if eles:get(1):n():is_a("ReturnExpr") do
			new.statements=List::new()
			new.statements:append_Node(eles:get(1):n())
		done
	return new

	function(EleList eles) FunctionBody::match -> int does
		if (eles:get(0).is_token) do
			return 0
		done

		if -eles:get(0):n():is_a("SepExpr") do
			return 0
		done

		if eles:get(1).is_token do
			return 0
		done

		if eles:in_slice()>2 do
			if eles:get(1):n():is_a("Expression") do
				if -eles:get(2).is_token do
					if eles:get(2):n():is_a("FunctionBody") do
						if eles:get(1):n():is_a("IfExpr") do
							if (eles:get(1):n()|IfExpr).is_elif do
								return 0
							done
						done
						return 3
					done
				done
			done
		done
		if eles:get(1):n():is_a("ReturnExpr") do
			int i=0
			Element e
			while i<eles:in_slice() do #Don't match more than one return into a body per function. #TODO: Improve
				e=eles:get(i)
				if -e.is_token do
					if e:n():is_a("FunctionBody") do
						return 0
					done
				done
				i+=1
			done
			return 2
		done
	return 0

	function() FunctionBody::impl -> void does
		FunctionBody_t = NodeType::new("FunctionBody")\
					:set_printer(FunctionBody::print |NodePrinter)\
					:set_creator(FunctionBody::create|NodeCreator)\
					:set_matcher(FunctionBody::match |NodeMatcher)\
					:matches(2)
	return
endtype

NodeType FunctionBody_t


type FunctionDecl is packed
	NodeType type_
	FunctionDeclHead head
	List body

	function(FunctionDecl node, int depth) FunctionDecl::print -> void does
		printf("FunctionDecl:\n")
		parse::indent(depth+1)
		printf("|- Head: ")
		(node.head|Node):print(depth+1)
		if -node.head.is_extern do
			int i=0
			while i<node.body.len do
				parse::indent(depth+1)
				if i==node.body.len-1 do
					printf("\\%i- ", i)
					node.body:get_Node(i):print(depth)
				else do
					printf("|%i- ", i)
					node.body:get_Node(i):print(depth+2)
				done
				i+=1
			done
		done
	return

	function(FunctionDeclHead head) FunctionDecl::create_raw_extern -> FunctionDecl does
		FunctionDecl new = malloc(@sizeof(FunctionDecl)@)|FunctionDecl
		new.type_=FunctionDecl_t
		new.head=head
	return new

	function(FunctionDeclHead head, List body) FunctionDecl::create_raw -> FunctionDecl does
		FunctionDecl new = FunctionDecl::create_raw_extern(head)
		new.body=body
	return new

	function(EleList eles) FunctionDecl::create -> FunctionDecl does
		if -eles:get(0):n()|FunctionDeclHead.is_extern do
			return FunctionDecl::create_raw(eles:get(0):n()|FunctionDeclHead, (eles:get(1):n()|FunctionBody).statements)
		done
	return FunctionDecl::create_raw_extern(eles:get(0):n()|FunctionDeclHead)

	function(EleList eles) FunctionDecl::match -> int does
		if eles:get(0):n():is_a("FunctionDeclHead") do
			if (eles:get(0):n()|FunctionDeclHead).is_extern do
				return 1
			done
		done
		if (-eles:get(0):n():is_a("FunctionDeclHead")):or(\
		    -eles:get(1):n():is_a("FunctionBody")) do
			return 0
		done
	return 2

	function(FunctionDecl n, TransformerPass p) FunctionDecl::visit -> void does
		if -n.head:is_generic() do
			printf("Entered")
			p.proj:enter_method_named(n.head:get_strname())
		else do
			printf("\nNOT ENTERIGN GENERIC\n")
		done
		if -n.head.is_extern do
			int i=0
			Node res
			while i<n.body.len do
				res=p:visit(n.body:get_Node(i))
				if res|ptr==null do
					n.body:del(i)
				else do
					n.body:set(i, res|ptr)
				done
				i+=1
			done
		done
		if -n.head:is_generic() do
			p.proj:exit_method()
		done
	return

	function(FunctionDecl self) FunctionDecl::copy -> FunctionDecl does
		List new_body = null|List
		if -self.head.is_extern do
			new_body=List::new()
			int i=0
			while i<self.body.len do
				new_body:append_Node(self.body:get_Node(i):copy())
				i+=1
			done
		done
	return FunctionDecl::create_raw(self.head|Node:copy()|FunctionDeclHead, new_body)

	function() FunctionDecl::impl -> void does
		FunctionDecl_t = NodeType::new("FunctionDecl")\
					:set_printer(FunctionDecl::print |NodePrinter)\
					:set_creator(FunctionDecl::create|NodeCreator)\
					:set_matcher(FunctionDecl::match |NodeMatcher)\
					:set_visitor(FunctionDecl::visit |NodeVisitor)\
					:set_tcopier(FunctionDecl::copy  |NodeTCopier)\
					:matches(2):matches_only_nodes()
	return
endtype

NodeType FunctionDecl_t