type GroupingExpr is packed
	NodeType type_
	Token anchor
	Node contents

	function(GroupingExpr node, int depth) GroupingExpr::print -> void does
		printf("GroupingExpr: ")
		node.contents:print(depth+1)
	return

	function(EleList eles) GroupingExpr::create -> GroupingExpr does
		GroupingExpr new = malloc(@sizeof(GroupingExpr)@)|GroupingExpr
		new.contents=eles:get(1):n()
		new.anchor=eles:get(0):t()
	return new

	function(EleList eles) GroupingExpr::match -> int does
		if (-eles:get(0).is_token):or(\
		     eles:get(1).is_token):or(\
		    -eles:get(2).is_token) do
			return 0
		done

		if (eles:get(0):t().type_.name!="T_PAREN_OPEN"):or(\
			eles:get(2):t().type_.name!="T_PAREN_CLOSE"):or(\
		   -eles:get(1):n():is_a("ValueExpression")) do
			return 0
		done

		if parse::lookahead_is_possibly_function(eles) do
			return 0
		done
	return 3

	function(GroupingExpr n, TransformerPass p) GroupingExpr::visit -> void does
		n.contents=p:visit(n.contents)
	return

	function() GroupingExpr::impl -> NodeType does
	return NodeType::new("GroupingExpr")\
					:set_printer(GroupingExpr::print |NodePrinter)\
					:set_creator(GroupingExpr::create|NodeCreator)\
					:set_matcher(GroupingExpr::match |NodeMatcher)\
					:set_visitor(GroupingExpr::visit |NodeVisitor)\
					:matches(3):addtype("Tuple"):addtype("ValueExpression")
endtype
