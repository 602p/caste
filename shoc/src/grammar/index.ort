type IndexExpr is packed
	NodeType type_
	Token anchor
	Node value
	Node array

	function(IndexExpr node, int depth) IndexExpr::print -> void does
		printf("IndexExpr\n")
		parse::indent(depth)
		printf("|- Array: ")
		node.array:print(depth+1)
		parse::indent(depth)
		printf("\\- Value: ")
		node.value:print(depth+1)
	return

	function(Node array, Node value, Token anchor) IndexExpr::create_direct -> IndexExpr does
		IndexExpr new = malloc(@sizeof(IndexExpr)@)|IndexExpr
		new.type_=IndexExpr_t
		new.anchor=anchor
		new.value=value
		new.array=array
	return new

	function(EleList eles) IndexExpr::create -> IndexExpr does
	return IndexExpr::create_direct(eles:get(0):n(), eles:get(2):n(), eles:get(1):t())

	function(EleList eles) IndexExpr::match -> int does
		if eles:get(0).is_token:or(\
		  -eles:get(1).is_token):or(\
		   eles:get(2).is_token):or(\
		  -eles:get(3).is_token) do
			return 0
		done

		if (eles:get(1):t().type_.name!="T_BRACKET_OPEN"):or(\
		    eles:get(3):t().type_.name!="T_BRACKET_CLOSE"):or(\
		    -eles:get(0):n():is_a("ValueExpression")):or(\
		    -eles:get(2):n():is_a("ValueExpression")) do
			return 0
		done

		if parse::lookahead_is_accessor(eles) do
			return 0
		done

		if parse::lookahead_is_possibly_function(eles) do
			return 0
		done
	return 4

	function(IndexExpr n, TransformerPass p) IndexExpr::visit -> void does
		n.value=p:visit(n.value)
		n.array=p:visit(n.array)
	return

	function(IndexExpr self) IndexExpr::copy -> Node does
	return IndexExpr::create_direct(self.array:copy(), self.value:copy(), self.anchor)|Node

	function() IndexExpr::impl -> void does
		IndexExpr_t = NodeType::new("IndexExpr")\
					:set_printer(IndexExpr::print |NodePrinter)\
					:set_creator(IndexExpr::create|NodeCreator)\
					:set_matcher(IndexExpr::match |NodeMatcher)\
					:set_visitor(IndexExpr::visit |NodeVisitor)\
					:set_tcopier(IndexExpr::copy  |NodeTCopier)\
					:matches(4):addtype("IdentifierExpression")
	return
endtype

NodeType IndexExpr_t