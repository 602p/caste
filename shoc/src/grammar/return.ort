type ReturnExpr is packed
	NodeType type_
	Token anchor
	bool is_void
	Node value

	function(ReturnExpr node, int depth) ReturnExpr::print -> void does
		printf("ReturnExpr: ")
		if node.is_void do
			printf("<void>\n")
		else do
			node.value:print(depth+1)
		done
	return

	function() ReturnExpr::create_direct_void -> ReturnExpr does
		ReturnExpr new = malloc(@sizeof(ReturnExpr)@)|ReturnExpr
		new.is_void=true
	return new

	function(EleList eles) ReturnExpr::create -> ReturnExpr does
		ReturnExpr new = ReturnExpr::create_direct_void()
		if eles:in_slice()>1 do
			if -eles:get(1).is_token do
				new.is_void=-eles:get(1):n():is_a("ValueExpression")
			done
		done

		if -new.is_void do
			new.value=eles:get(1):n()
		done

		new.anchor=eles:get(0):t()
	return new

	function(EleList eles) ReturnExpr::match -> int does
		if (-eles:get(0).is_token) do
			return 0
		done

		if (eles:get(0):t().type_.name!="T_RETURN") do
			return 0
		done

		if eles:in_slice()>1 do
			if -eles:get(1).is_token do
				if eles:get(1):n():is_a("ValueExpression") do
					return 2
				done
			done
		done
	return 1

	function(ReturnExpr n, TransformerPass p) ReturnExpr::visit -> void does
		if -n.is_void do
			n.value=p:visit(n.value)
		done
	return

	function(ReturnExpr self) ReturnExpr::copy -> Node does
		ReturnExpr new = ReturnExpr::create_direct_void()
		new.is_void=self.is_void
		new.value=self.value
	return new|Node

	function() ReturnExpr::impl -> void does
		ReturnExpr_t = NodeType::new("ReturnExpr")\
					:set_printer(ReturnExpr::print |NodePrinter)\
					:set_creator(ReturnExpr::create|NodeCreator)\
					:set_matcher(ReturnExpr::match |NodeMatcher)\
					:set_visitor(ReturnExpr::visit |NodeVisitor)\
					:set_tcopier(ReturnExpr::copy  |NodeTCopier)\
					:matches(1):addtype("Expression")
	return
endtype

NodeType ReturnExpr_t