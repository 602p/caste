type AccessorExpr is packed
	NodeType type_
	Token anchor
	cstr mode
	Node object
	cstr field

	function(AccessorExpr node, int depth) AccessorExpr::print -> void does
		printf("AccessorExpr (Mode='%s')\n", node.mode)
		parse::indent(depth)
		printf("|- Object: ")
		node.object:print(depth+1)

		parse::indent(depth)
		printf("\\- Field: %s\n", node.field)
	return

	function(EleList eles) AccessorExpr::create -> AccessorExpr does
		AccessorExpr new = malloc(@sizeof(AccessorExpr)@)|AccessorExpr
		new.object=eles:get(0):n()
		new.mode=eles:get(1):t().text
		new.field=(eles:get(2):n()|NameExpr).name
		new.anchor=eles:get(1):t()
	return new

	function(Project p, Node obj, cstr mode, cstr field) AccessorExpr::create_direct -> AccessorExpr does
		AccessorExpr new = malloc(@sizeof(AccessorExpr)@)|AccessorExpr
		new.type_=p:type_by_name("AccessorExpr")
		new.object=obj
		new.mode=mode
		new.field=field
	return new

	function(EleList eles) AccessorExpr::match -> int does
		if eles:get(0).is_token:or(\
		  -eles:get(1).is_token):or(\
		   eles:get(2).is_token) do
			return 0
		done

		if (-((eles:get(1):t().type_.name=="T_DOT"):or(\
		 	   eles:get(1):t().type_.name=="T_COLON"):or(\
		 	   eles:get(1):t().type_.name=="T_DOUBLECOLON"))):or(\
		   -eles:get(0):n():is_a("ValueExpression")):or(\
		   -eles:get(2):n():is_a("NameExpr")) do
			return 0
		done

		if parse::lookahead_is_accessor(eles) do
			return 0
		done
	return 3

	function(AccessorExpr n, TransformerPass p) AccessorExpr::visit -> void does
		n.object=p:visit(n.object)
	return

	function() AccessorExpr::impl -> NodeType does
	return NodeType::new("AccessorExpr")\
					:set_printer(AccessorExpr::print |NodePrinter)\
					:set_creator(AccessorExpr::create|NodeCreator)\
					:set_matcher(AccessorExpr::match |NodeMatcher)\
					:set_visitor(AccessorExpr::visit |NodeVisitor)\
					:matches(3):addtype("IdentifierExpression")
endtype
