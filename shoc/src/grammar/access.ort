type AccessorExpr is packed
	NodeType type_
	cstr mode
	Node object
	Node field

	function(AccessorExpr node, int depth) AccessorExpr::print -> void does
		printf("AccessorExpr (Mode='%s')\n", node.mode)
		parse::indent(depth)
		printf("|- Object: ")
		node.object:print(depth+1)

		parse::indent(depth)
		printf("\- Field: ")
		node.field:print(depth+1)
	return

	function(EleList eles) AccessorExpr::create -> AccessorExpr does
		AccessorExpr new = malloc(@sizeof(AccessorExpr)@)|AccessorExpr
		new.object=eles:get(0):n()
		new.mode=eles:get(1):t().text
		new.field=eles:get(2):n()
	return new

	function(EleList eles) AccessorExpr::match -> int does
		if eles:get(0).is_token:or(\
		  -eles:get(1).is_token):or(\
		   eles:get(2).is_token) do
			return 0
		done

		if (-(\
				(eles:get(1):t().type_.name=="T_DOT"):or(\
		 		eles:get(1):t().type_.name=="T_COLON"):or(\
		 		eles:get(1):t().type_.name=="T_DOUBLECOLON"))):or(\
		   -eles:get(0):n():is_a("ValueExpression")):or(\
		   -eles:get(2):n():is_a("NameExpr")) do
			return 0
		done

		if parse::lookahead_is_accessor(eles) do
			return 0
		done
	return 3

	function() AccessorExpr::impl -> NodeType does
	return NodeType::new("AccessorExpr")\
					:set_printer(AccessorExpr::print |NodePrinter)\
					:set_creator(AccessorExpr::create|NodeCreator)\
					:set_matcher(AccessorExpr::match |NodeMatcher)\
					:matches(3):addtype("IdentifierExpression")
endtype
