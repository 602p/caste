type UnOpExpr is packed
	NodeType type_
	Token anchor
	cstr op
	Node value

	function(UnOpExpr node, int depth) UnOpExpr::print -> void does
		printf("UnOpExpr (Operator='%s')\n", node.op)
		parse::indent(depth)
		printf("\\- Value: ")
		node.value:print(depth+1)
	return

	function(Node value, cstr op, Token anchor) UnOpExpr::create_direct -> UnOpExpr does
		UnOpExpr new = malloc(@sizeof(UnOpExpr)@)|UnOpExpr
		new.type_ = UnOpExpr_t
		new.value=value
		new.op=op
		new.anchor=anchor
	return new

	function(EleList eles) UnOpExpr::create -> UnOpExpr does
	return UnOpExpr::create_direct(eles:get(1):n(), eles:get(0):t().text, eles:get(0):t())

	function(EleList eles) UnOpExpr::match -> int does
		if eles:get(1).is_token:or(\
		  -eles:get(0).is_token) do
			return 0
		done

		if (-eles:get(0):t():is_a("T_UNOP")):or(\
		    -eles:get(1):n():is_a("ValueExpression")) do
			return 0
		done
	return 2

	function(UnOpExpr n, TransformerPass p) UnOpExpr::visit -> void does
		n.value=p:visit(n.value)
	return

	function(UnOpExpr self) UnOpExpr::copy -> Node does
	return UnOpExpr::create_direct(self.value:copy(), self.op, self.anchor)|Node

	function() UnOpExpr::impl -> void does
		UnOpExpr_t = NodeType::new("UnOpExpr")\
					:set_printer(UnOpExpr::print |NodePrinter)\
					:set_creator(UnOpExpr::create|NodeCreator)\
					:set_matcher(UnOpExpr::match |NodeMatcher)\
					:set_visitor(UnOpExpr::visit |NodeVisitor)\
					:set_tcopier(UnOpExpr::copy  |NodeTCopier)\
					:matches(2):addtype("ValueExpression")
	return
endtype

NodeType UnOpExpr_t