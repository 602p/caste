type GenericArgListTemp is packed
	NodeType type_
	Token anchor
	List args

	function(GenericArgListTemp node, int depth) GenericArgListTemp::print -> void does
		printf("GenericArgListTemp:\n")
		int i=0
		while i<node.args.len do
			parse::indent(depth+1)
			printf("|%i- ", i)
			node.args:get_Node(i):print(depth+1)
			i+=1
		done
	return

	function(EleList eles) GenericArgListTemp::create -> GenericArgListTemp does
		GenericArgListTemp new = malloc(@sizeof(GenericArgListTemp)@)|GenericArgListTemp
		
		int count = GenericArgListTemp::match(eles)
		if count==2 do
			if eles:get(1).is_token do
				if eles:get(1):t():is_a("T_PTYPE_CLOSE") do
					new.args=List::new()
					new.args:append(eles:get(0):n()|ptr)
				done
			else do
				new.args=eles:get(2):n()|GenericArgListTemp.args
			done
		elif count==3 do
			new.args=eles:get(2):n()|GenericArgListTemp.args
			new.args:insert_Node(0, eles:get(0):n())
		done
	return new

	function(EleList eles) GenericArgListTemp::match -> int does
		if eles:get(1).is_token do
			if eles:get(1):t():is_a("T_PTYPE_CLOSE") do
				if -eles:get(0).is_token do
					if eles:get(0):n():is_a("TypeName") do
						return 2
					done
				done
			done
		done

		if -eles:get(0).is_token do
			if eles:get(0):n():is_a("TypeName") do
				if eles:get(1).is_token do
					if eles:get(1):t():is_a("T_COMMA") do
						if -eles:get(2).is_token do
							if eles:get(2):n():is_a("GenericArgListTemp") do
								return 3
							done
						done
					done
				done
			done
		done
	return 0

	function() GenericArgListTemp::impl -> void does
		GenericArgListTemp_t = NodeType::new("GenericArgListTemp")\
					:set_printer(GenericArgListTemp::print |NodePrinter)\
					:set_creator(GenericArgListTemp::create|NodeCreator)\
					:set_matcher(GenericArgListTemp::match |NodeMatcher)\
					:matches(2)
	return
endtype

NodeType GenericArgListTemp_t

type GenericArgList is packed
	NodeType type_
	Token anchor
	List args

	function(GenericArgList node, int depth) GenericArgList::print -> void does
		printf("GenericArgList:\n")
		int i=0
		while i<node.args.len do
			parse::indent(depth+1)
			printf("|%i- ", i)
			node.args:get_Node(i):print(depth+1)
			i+=1
		done
	return

	function(EleList eles) GenericArgList::create -> GenericArgList does
		GenericArgList new = malloc(@sizeof(GenericArgList)@)|GenericArgList
		new.args=eles:get(1):n()|GenericArgListTemp.args
	return new

	function(EleList eles) GenericArgList::match -> int does
		if eles:get(0).is_token do
			if -eles:get(1).is_token do
				if eles:get(0):t():is_a("T_PTYPE_OPEN") & eles:get(1):n():is_a("GenericArgListTemp") do
					return 2
				done
			done
		done
	return 0

	function() GenericArgList::impl -> void does
		GenericArgList_t = NodeType::new("GenericArgList")\
					:set_printer(GenericArgList::print |NodePrinter)\
					:set_creator(GenericArgList::create|NodeCreator)\
					:set_matcher(GenericArgList::match |NodeMatcher)\
					:matches(2)
	return
endtype

NodeType GenericArgList_t

type GenericName is packed
	NodeType type_
	Token anchor
	cstr base_name
	List args

	function(GenericName node, int depth) GenericName::print -> void does
		printf("GenericName: base=%s\n", node.base_name)
		int i=0
		while i<node.args.len do
			parse::indent(depth+1)
			printf("|%i- ", i)
			node.args:get_Node(i):print(depth+1)
			i+=1
		done
	return

	function(cstr base_name, List args, Token anchor) GenericName::create_direct -> GenericName does
		GenericName new = malloc(@sizeof(GenericName)@)|GenericName
		new.type_=GenericName_t
		new.args=args
		new.base_name=base_name
		new.anchor=anchor
	return new

	function(EleList eles) GenericName::create -> GenericName does
	return GenericName::create_direct(eles:get(0):n()|NameExpr.name, eles:get(1):n()|GenericArgList.args, eles:get(0):n()|NameExpr.anchor)

	function(EleList eles) GenericName::match -> int does
		if -eles:get(0).is_token do
			if -eles:get(1).is_token do
				if eles:get(0):n():is_a("NameExpr") & eles:get(1):n():is_a("GenericArgList") do
					return 2
				done
			done
		done
	return 0

	function(GenericName self) GenericName::copy -> Node does
		List new_args = List::new()
		int i=0
		while i<self.args.len do
			new_args:append_Node(self.args:get_Node(i):copy())
			i+=1
		done
	return GenericName::create_direct(self.base_name:copy(), new_args, self.anchor)|Node

	function(GenericName self, TransformerPass p) GenericName::visit -> GenericName does
		int i=0
		while i<self.args.len do
			self.args:set(i, p:visit(self.args:get_Node(i))|ptr)
			i+=1
		done
	return self

	function() GenericName::impl -> void does
		GenericName_t = NodeType::new("GenericName")\
					:set_printer(GenericName::print |NodePrinter)\
					:set_creator(GenericName::create|NodeCreator)\
					:set_matcher(GenericName::match |NodeMatcher)\
					:set_tcopier(GenericName::copy  |NodeTCopier)\
					:set_visitor(GenericName::visit |NodeVisitor)\
					:matches(2):addtype("TypeName"):addtype("NameExpr"):addtype("ValueExpression")
	return
endtype

NodeType GenericName_t