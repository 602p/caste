type FileNode is packed
	NodeType type_
	List statements

	function(FileNode node, int depth) FileNode::print -> void does
		printf("FileNode: (N_Statements=%i)\n", node.statements.len)
		int i=0
		while i<node.statements.len do
			parse::indent(depth+1)
			printf("|%i- ", i)
			node.statements:get_Node(i):print(depth+2)
			i+=1
		done
	return

	function(Project p, EleList eles) FileNode::create -> FileNode does
		FileNode new = malloc(@sizeof(FileNode)@)|FileNode
		new.type_=p:type_by_name("FileNode")
		new.statements=List::new()
		int i=0
		bool bad = false
		while i<eles:in_slice() do
			if eles:get(i).is_token do
				p:fail_in_token("Invalid Syntax", eles:get(i):t())
			done
			new.statements:append_Node(eles:get(i):n())
			if eles:get(i):n():is_a("TypeDeclHead") do
				if -eles:get(i):n()|TypeDeclHead.is_func_alias do
					printf("\n\nError: File node contains a TypeDeclHead\n")
					bad=true
				done
			done
			i+=1
		done
		if bad do
			new|Node:print(0)
			shoc::bail_out("Invalid File node. Cannot continue")
		done
	return new

	function(EleList eles) FileNode::match -> int does
	return 0

	function(FileNode n, TransformerPass p) FileNode::visit -> void does
		int i=0
		Node res
		while i<n.statements.len do
			res=p:visit(n.statements:get_Node(i))
			
			if res|ptr==null do
				n.statements:del(i)
			else do
				n.statements:set(i, res|ptr)
			done
			i+=1
		done
	return

	function() FileNode::impl -> NodeType does
	return NodeType::new("FileNode")\
					:set_printer(FileNode::print |NodePrinter)\
					:set_creator(FileNode::create|NodeCreator)\
					:set_matcher(FileNode::match |NodeMatcher)\
					:set_visitor(FileNode::visit |NodeVisitor)\
					:matches(2)
endtype
