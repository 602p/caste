function(cstr operator) orth::grammar::get_op_precedence -> int does
	if operator=="*" do
		return 0
	elif operator=="/" do
		return 0
	elif operator=="+" do
		return 1
	elif operator=="-" do
		return 1
	elif operator=="%" do
		return 4
	elif operator=="==" do
		return 5
	elif operator=="!=" do
		return 6
	elif operator=="<" do
		return 7
	elif operator==">" do
		return 8
	elif operator=="<=" do
		return 9
	elif operator==">=" do
		return 10
	elif operator=="^" do
		return 11
	elif operator=="&" do
		return 12
	elif operator=="<<" do
		return 13
	elif operator==">>" do
		return 14
	done
	shoc::bail_out("In orth::grammar::get_op_precedence: Unknown operatior:"+operator)
return -1

type BinOpExpr is packed
	NodeType type_
	cstr op
	Node lhs
	Node rhs

	function(BinOpExpr node, int depth) BinOpExpr::print -> void does
		printf("BinOpExpr (Operator='%s')\n", node.op)
		parse::indent(depth)
		printf("|- LHS: ")
		node.lhs:print(depth+1)

		parse::indent(depth)
		printf("\- RHS: ")
		node.rhs:print(depth+1)
	return

	function(EleList eles) BinOpExpr::create -> BinOpExpr does
		BinOpExpr new = malloc(@sizeof(BinOpExpr)@)|BinOpExpr
		new.lhs=eles:get(0):n()
		new.op=eles:get(1):t().text
		new.rhs=eles:get(2):n()
	return new

	function(Project p, Node lhs, Node rhs, cstr op) BinOpExpr::create_direct -> BinOpExpr does
		BinOpExpr new = malloc(@sizeof(BinOpExpr)@)|BinOpExpr
		new.type_=p:type_by_name("BinOpExpr")
		new.lhs=lhs
		new.rhs=rhs
		new.op=op
	return new

	function(EleList eles) BinOpExpr::match -> int does
		if eles:get(0).is_token:or(\
		  -eles:get(1).is_token):or(\
		   eles:get(2).is_token) do
			return 0
		done

		if (eles:get(1):t().type_.name!="T_BINOP"):or(\
		   -eles:get(0):n():is_a("ValueExpression")):or(\
		   -eles:get(2):n():is_a("ValueExpression")) do
			return 0
		done

		if parse::lookahead_is_accessor(eles) do
			return 0
		done

		if parse::lookahead_is_possibly_function(eles) do
			return 0 #Don't turn a(1)+2 into a,(1)+2
		done

		Element lookahead = eles:get_lookahead()
		if lookahead.is_token do
			Token la = lookahead:t()
			if la.type_.name=="T_BINOP" do
				if orth::grammar::get_op_precedence(la.text)<=orth::grammar::get_op_precedence(eles:get(1):t().text) do
					return 0 #Order of operations
				done
			done
		done
	return 3

	function(BinOpExpr n, TransformerPass p) BinOpExpr::visit -> void does
		n.lhs=p:visit(n.lhs)
		n.rhs=p:visit(n.rhs)
	return

	function() BinOpExpr::impl -> NodeType does
	return NodeType::new("BinOpExpr")\
					:set_printer(BinOpExpr::print |NodePrinter)\
					:set_creator(BinOpExpr::create|NodeCreator)\
					:set_matcher(BinOpExpr::match |NodeMatcher)\
					:set_visitor(BinOpExpr::visit |NodeVisitor)\
					:matches(3):addtype("ValueExpression")
endtype
