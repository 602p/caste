type AssignmentExpr is packed
	NodeType type_
	Token anchor
	cstr op
	Node lhs
	Node rhs

	function(AssignmentExpr node, int depth) AssignmentExpr::print -> void does
		printf("AssignmentExpr (Operator='%s')\n", node.op)
		parse::indent(depth)
		printf("|- LHS: ")
		node.lhs:print(depth+1)

		parse::indent(depth)
		printf("\\- RHS: ")
		node.rhs:print(depth+1)
	return

	function(EleList eles) AssignmentExpr::create -> AssignmentExpr does
		AssignmentExpr new = malloc(@sizeof(AssignmentExpr)@)|AssignmentExpr
		new.lhs=eles:get(0):n()
		new.op=eles:get(1):t().text
		new.rhs=eles:get(2):n()
		new.anchor=eles:get(1):t()
	return new

	function(Node lhs, Node rhs, Token anchor) AssignmentExpr::create_direct -> AssignmentExpr does
		AssignmentExpr new = malloc(@sizeof(AssignmentExpr)@)|AssignmentExpr
		new.lhs=lhs
		new.rhs=rhs
		new.op="="
		new.type_=AssignmentExpr_t
		new.anchor=anchor
	return new

	function(EleList eles) AssignmentExpr::match -> int does
		if eles:get(0).is_token:or(\
		  -eles:get(1).is_token):or(\
		   eles:get(2).is_token) do
			return 0
		done

		if (-(\
				(eles:get(1):t().type_.name=="T_ASSIGN"):or(\
		 		eles:get(1):t().type_.name=="T_AUGASSIGN"))):or(\
		   -eles:get(0):n():is_a("IdentifierExpression")):or(\
		   -eles:get(2):n():is_a("ValueExpression")) do
			return 0
		done

		if parse::lookahead_is_accessor(eles) do
			return 0
		done
	return 3

	function(AssignmentExpr n, TransformerPass p) AssignmentExpr::visit -> void does
		n.rhs=p:visit(n.rhs)
		n.lhs=p:visit(n.lhs)
	return

	function(AssignmentExpr self) AssignmentExpr::copy -> Node does
		shoc::assert(self.op=="=", "Should have reduced +=... before any call to AssignmentExpr::copy")
	return AssignmentExpr::create_direct(self.lhs:copy(), self.rhs:copy(), self.anchor)|Node

	function() AssignmentExpr::impl -> void does
		AssignmentExpr_t = NodeType::new("AssignmentExpr")\
					:set_printer(AssignmentExpr::print |NodePrinter)\
					:set_creator(AssignmentExpr::create|NodeCreator)\
					:set_matcher(AssignmentExpr::match |NodeMatcher)\
					:set_visitor(AssignmentExpr::visit |NodeVisitor)\
					:set_tcopier(AssignmentExpr::copy  |NodeTCopier)\
					:matches(3):addtype("Expression")
	return
endtype

NodeType AssignmentExpr_t