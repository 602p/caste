function() lex::init -> void does
	List t=List::new()

	t:append(TokenType::new_fn("T_LINE_COMMENT", lex::match_line_comment|TokenMatcher):notoken()|ptr)
	t:append(TokenType::new_fn("T_BLOCK_COMMENT", lex::match_block_comment|TokenMatcher):notoken()|ptr)

	t:append(TokenType::new_fn("T_IMPORT", lex::match_import|TokenMatcher)|ptr)
	t:append(TokenType::new_fn("T_INTRINSIC", lex::match_intrinsic|TokenMatcher)|ptr)

	t:append(TokenType::new_kw("T_IF", "if")|ptr)
	t:append(TokenType::new_kw("T_DONE", "done")|ptr)
	t:append(TokenType::new_kw("T_DO", "do")|ptr)
	t:append(TokenType::new_kw("T_ELIF", "elif"):after("T_ENDOFSTATEMENT")|ptr)
	t:append(TokenType::new_kw("T_ELSE", "else"):after("T_ENDOFSTATEMENT")|ptr)

	t:append(TokenType::new_kw("T_RETURN", "return"):after("T_ENDOFSTATEMENT")|ptr)

	t:append(TokenType::new_kw("T_WHILE", "while"):after("T_ENDOFSTATEMENT")|ptr)

	t:append(TokenType::new_kw("T_TYPEDECL", "type")|ptr)
	t:append(TokenType::new_kw("T_TYPEDECL_IS", "is")|ptr)
	t:append(TokenType::new_fn("T_TYPEDECL_NAME", lex::match_identifier|TokenMatcher):after("T_TYPEDECL")|ptr)
	t:append(TokenType::new_kw("T_TYPEDECL_ENDTYPE", "do")|ptr)
	t:append(TokenType::new_kw("T_TYPEDECL_PACKED", "packed"):after("T_TYPEDECL_IS")|ptr)
	t:append(TokenType::new_kw("T_TYPEDECL_ALIAS", "a"):after("T_TYPEDECL_IS")|ptr)
	t:append(TokenType::new_eq("T_TYPEDECL_ALIAS_FUNC", "function->"):after("T_TYPEDECL_ALIAS")|ptr)
	t:append(TokenType::new_fn("T_TYPEDECL_ALIAS_FUNC_RT", lex::match_identifier|TokenMatcher):after("T_TYPEDECL_ALIAS_FUNC")|ptr)
	t:append(TokenType::new_fn("T_TYPEDECL_ALIAS_NAME", lex::match_identifier|TokenMatcher):after("T_TYPEDECL_ALIAS")|ptr)
	
	t:append(TokenType::new_eq("T_FUNCTIONDECL", "function"):after("T_ENDOFSTATEMENT")|ptr)
	t:append(TokenType::new_eq("T_ARGLIST_START", "("):after("T_FUNCTIONDECL")|ptr)
	t:append(TokenType::new_fn("T_ARGLIST_ELE", lex::match_var_decl|TokenMatcher):after("T_ARGLIST_START"):or("T_ARGLIST_SEP")|ptr)
	t:append(TokenType::new_eq("T_ARGLIST_SEP", ","):after("T_ARGLIST_ELE")|ptr)
	t:append(TokenType::new_eq("T_ARGLIST_END", ")"):after("T_ARGLIST_ELE"):or("T_ARGLIST_START")|ptr)
	t:append(TokenType::new_fn("T_FUNCTIONDECL_NAME", lex::match_function_identifier|TokenMatcher):after("T_ARGLIST_END")|ptr)
	t:append(TokenType::new_eq("T_FUNCTIONDECL_RETURN", "->"):after("T_FUNCTIONDECL_NAME")|ptr)
	t:append(TokenType::new_fn("T_FUNCTIONDECL_RETURN_TY", lex::match_identifier|TokenMatcher):after("T_FUNCTIONDECL_RETURN")|ptr)
	t:append(TokenType::new_kw("T_FUNCTIONDECL_DOES", "does"):after("T_FUNCTIONDECL_RETURN_TY")|ptr)

	t:append(TokenType::new_fn("T_VAR_DECL", lex::match_var_decl|TokenMatcher):after("T_ENDOFSTATEMENT")|ptr)
	t:append(TokenType::new_fn("T_NAME", lex::match_identifier|TokenMatcher)|ptr)

	t:append(TokenType::new_fn("T_INT_LITERAL", lex::match_int_literal|TokenMatcher)|ptr)
	t:append(TokenType::new_fn("T_FLOAT_LITERAL", lex::match_float_literal|TokenMatcher)|ptr)
	t:append(TokenType::new_fn("T_STRING_LITERAL", lex::match_string_literal|TokenMatcher)|ptr)

	t:append(TokenType::new_fn("T_AUGASSIGN", lex::match_augassign|TokenMatcher)|ptr)
	t:append(TokenType::new_fn("T_BINOP", lex::match_binop|TokenMatcher)\
		:after("T_NAME"):or("T_BRACKET_CLOSE"):or("T_PAREN_CLOSE"):or("T_INT_LITERAL")\
		:or("T_STRING_LITERAL"):or("T_FLOAT_LITERAL")|ptr) #Only match after things that could be value (removes
															#confustion with unary -)
	t:append(TokenType::new_eq("T_ASSIGN", "=")|ptr)
	

	t:append(TokenType::new_eq("T_PAREN_OPEN", "(")|ptr)
	t:append(TokenType::new_eq("T_PAREN_CLOSE", ")")|ptr)
	t:append(TokenType::new_eq("T_CAST", "|")|ptr)
	t:append(TokenType::new_eq("T_DOT", ".")|ptr)
	t:append(TokenType::new_eq("T_BRACKET_OPEN", "[")|ptr)
	t:append(TokenType::new_eq("T_BRACKET_CLOSE", "]")|ptr)
	t:append(TokenType::new_eq("T_DOT", ".")|ptr)
	t:append(TokenType::new_eq("T_COMMA", ",")|ptr)
	t:append(TokenType::new_eq("T_DOUBLECOLON", "::")|ptr)
	t:append(TokenType::new_eq("T_COLON", ":")|ptr)
	
	
	t:append(TokenType::new_in("T_UNOP", "-!")|ptr)
	
	t:append(TokenType::new_in("T_ENDOFSTATEMENT", "\r\n;")|ptr)

	lex_token_types=t
return

