import mem

type _StackNode is
	_StackNode _next
	_StackNode _prev
	cstr name 
endtype

_StackNode __stack
_StackNode __stack_tail

type AddtlEnterExitCallback is a function->void #func(cstr name)

AddtlEnterExitCallback __fex_addtl_callback_enter
AddtlEnterExitCallback __fex_addtl_callback_exit
bool __in_err
bool __err_initing

function(cstr name) orth::internal::hooks::function_enter_hook -> void does
	if __err_initing do
		return
	done
	if __stack|ptr|int == 0 do
		if -__err_initing do
			__err_initing=true
			orth::internal::hooks::setup_pstack()
			__err_initing=false
		done
	done
	if __in_err do
		return
	done
	__in_err=true
	if __fex_addtl_callback_enter|ptr|int!=null|int do
		__fex_addtl_callback_enter(name)
	done
	_StackNode new = mem::alloc_unmanaged(@sizeof(_StackNode)@)|_StackNode
	new._next=null|_StackNode
	new._prev=null|_StackNode
	new.name=name

	__stack_tail._next=new
	new._prev=__stack_tail
	__stack_tail=new

	__in_err=false
return

function(cstr name) orth::internal::hooks::function_exit_hook -> void does
	if __stack|ptr|int == 0 do
		return
	done
	if __in_err do
		return
	done
	__in_err=true
	if __stack._next|ptr|int==null|int do
		return
	done

	if __fex_addtl_callback_exit|ptr|int!=null|int do
		__fex_addtl_callback_exit(name)
	done

	_StackNode new_last=__stack_tail._prev
	mem::free_unmanaged(__stack_tail|ptr)
	__stack_tail=new_last
	new_last._next=null|_StackNode
	__in_err=false
return

function() orth::internal::hooks::setup_pstack -> void does
	_StackNode new = mem::alloc_unmanaged(@sizeof(_StackNode)@)|_StackNode
	new._next=null|_StackNode
	new._prev=null|_StackNode
	new.name="<dummy root>"

	__stack=new
	__stack_tail=new
return

function(cstr err) orth::fail -> void does
	cstr esc=malloc(2)
	esc[0]=27|byte
	esc[1]=0|byte
	printf(esc+"[41m==================== orth::fail bailout report ===================="+esc+"[0m\n")
	printf("Bailout message: '%s'\n", err)
	unwind::backtrace()
	if __stack|ptr == null do
		printf("Cannot print traceback, __stack is null. Did you compile with the 'funchooks' flag?\n")
		exit(2)
	done
	printf("Traceback (orth calls only, most recent call last):\n")
	_StackNode curr=__stack
	int curr_idx=0
	while curr|ptr!=null do
		printf("  %04i: %s\n", curr_idx, curr.name)
		curr_idx+=1
		curr=curr._next
	done
	mem::clean_up()

	exit(1)
return

function(int code) __orth_sig_h -> void does
	if code==11 do
		orth::fail("Segmentation Fault Caught")
	elif code==6 do
		orth::fail("Abort (malloc) Fault Caught")
	else do
		orth::fail("??? Fault Caught - "+code:str())
	done
return

import sighandle
function() orth::install_sigsev_handler -> void does
	system::set_interrupt_handler(11, __orth_sig_h|SignalHandler)
	system::set_interrupt_handler(6, __orth_sig_h|SignalHandler)
	system::set_interrupt_handler(8, __orth_sig_h|SignalHandler)
return