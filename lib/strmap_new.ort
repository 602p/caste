import boxes
import err

function(cstr string) cstr:elf_hash -> int does
   #Orth version of ELF hash (32-bit PJW hash from dragon book)
   int len = string:len()
   int x=0
   int i=0
   int hash=0
   while i<len do
      hash = (hash<<4) + string[i]|int

      x=hash&4026531840

      if x!=0 do
         hash = hash ^ (x>>24)
      done

      hash = hash & ((-x)-1)
      i+=1
   done
return hash

type StrMapEntry is
   cstr key
   ptr  value
endtype

type StrMap is
   int size
   ptr table

   function(int size) StrMap::new_sized -> StrMap does
      StrMap new = malloc(@sizeof(StrMap)@)|StrMap
      new.size=size
      new.table=malloc(size*@sizeof(StrMapEntry)@)
      int i=0
      while i<size do
         new:get_slot(i).key=null
         i+=1
      done
   return new

   function() StrMap::new -> StrMap does
   return StrMap::new_sized(128)

   function(StrMap self, int slot) StrMap:get_slot -> StrMapEntry does
   return self.table:offset(slot*@sizeof(StrMapEntry)@)|StrMapEntry

   function(StrMap self, cstr key, ptr value) StrMap:set -> void does
      # printf("Setting %s=%s\n", key, value)
      int slot_id=key:elf_hash()%self.size
      StrMapEntry slot = self:get_slot(slot_id)
      while slot_id<self.size do
         if slot.key|ptr==null do
            slot.key=key
            slot.value=value
            return
         elif slot.key|int==-1 do
            0 #TODO: Allow new values to be placed here. Not implemented currently, as this could lead to duplication of entries for the same key
         elif slot.key==key do
            slot.value=value
            return
         done
         slot_id+=1
         slot=self:get_slot(slot_id)
      done

      # printf("Resizing\n")
      
      #Resize:
      StrMap temp_new = StrMap::new_sized(self.size*2)
      # printf("New alloced\n")
      int i=0
      while i<self:num_keys() do
         # printf("Copying key %i\n", i)
         temp_new:set(self:get_key_by_num(i), self:get_by_num(i))
         i+=1
      done
      self.size=temp_new.size
      free(self.table)
      self.table=temp_new.table
      free(temp_new)
      self:set(key, value)

      # printf("Done Resizing\n")
   return

   function(StrMap self, cstr key) StrMap:get_entry -> StrMapEntry does
      int slot_id=key:elf_hash()%self.size
      StrMapEntry slot = self:get_slot(slot_id)
      while slot_id<self.size do
         if slot.key|ptr==null do
            return null|StrMapEntry
         elif slot.key==key do
            return slot
         else do
            slot_id+=1
            slot=self:get_slot(slot_id)
         done
      done
   return null|StrMapEntry

   function(StrMap self, cstr key) StrMap:get -> ptr does
      StrMapEntry e = self:get_entry(key)
      if e|ptr==null do
         self:_debug_print()
         orth::fail("Key not found in StrMap: "+key)
      done
   return e.value

   function(StrMap self, cstr key) StrMap:contains -> bool does
   return self:get_entry(key)|ptr!=null

   function(StrMap self) StrMap:num_keys -> int does
      int i=0
      int keys=0
      while i<self.size do
         if (self:get_slot(i).key|ptr!=null) & (self:get_slot(i).key|int!=-1) do
            keys+=1
         done
         i+=1
      done
   return keys

   function(StrMap self, int idx) StrMap:get_slot_by_num -> StrMapEntry does
      int i=0
      int key=0
      while i<self.size do
         if (self:get_slot(i).key|ptr!=null) & (self:get_slot(i).key|int!=-1) do
            if key==idx do
               return self:get_slot(i)
            done
            key+=1
         done
         i+=1
      done
   return null|StrMapEntry

   function(StrMap self, int idx) StrMap:get_key_by_num -> cstr does
      StrMapEntry e = self:get_slot_by_num(idx)
      if e|ptr==null do
         orth::fail("Idx not found in StrMap: "+idx:str())
      done
   return e.key

   function(StrMap self, int idx) StrMap:get_by_num -> ptr does
      StrMapEntry e = self:get_slot_by_num(idx)
      if e|ptr==null do
         orth::fail("Idx not found in StrMap: "+idx:str())
      done
   return e.value

   function(StrMap self) StrMap:_debug_print -> void does
      int i=0
      while i<self.size do
         if self:get_slot(i).key|ptr==null do
            printf("%03i\t-\n", i)
         else do
            printf("%03i\t%s\t%s\n", i, self:get_slot(i).key, self:get_slot(i).value)
         done
         i+=1
      done
   return
endtype