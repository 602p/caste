import std

type LinkedListNode is
    ptr value
    LinkedListNode next

    function(ptr value) LinkedListNode::new -> LinkedListNode does
        LinkedListNode new = malloc(@sizeof(LinkedListNode)@)|LinkedListNode
        new.value=value
    return new

    function(LinkedListNode n) LinkedListNode:free -> void does
        free(n)
    return
endtype

type List is
    int len
    LinkedListNode head

    function() List::new -> List does
        List new = malloc(@sizeof(List)@)|List
        new.len=0
    return new

    function(List l, int want) List:get_node -> LinkedListNode does
        int idx = 0
        LinkedListNode current = l.head
        while idx!=want do
            idx+=1
            current=current.next
        done
    return current

    function(List l, int want) List:get -> ptr does
    return l:get_node(want).value

    function(List l, ptr item) List:append -> void does
        LinkedListNode new = LinkedListNode::new(item)
        if l.len>0 do
            LinkedListNode last = l:get_node(l.len-1)
            last.next=new
        else do
            l.head=new
        done
        l.len+=1
    return

    function(List l, int i, ptr item) List:insert -> void does
        if i==l.len do
            l:append(item)
            return
        elif i>l.len do
            printf("Can't insert past end of list!\n")
            return
        done

        LinkedListNode new = LinkedListNode::new(item)

        if i==0 do
            if l.len!=0 do
                new.next=l.head
            done
            l.head=new
            l.len+=1
            return
        done

        l.len+=1

        LinkedListNode prev = l:get_node(i-1)
        new.next=prev.next
        prev.next=new
    return

    function(List l, int i) List:del -> void does
        if i>=l.len do
            printf("No such item\n")
            return
        done

        if i==0 do
            l.head:free()
            if l.len>1 do
                l.head=l.head.next
            done
            l.len-=1
            return
        done

        LinkedListNode prev = l:get_node(i-1)
        prev.next:free()
        if i!=l.len-1 do
            prev.next=prev.next.next
        done
        l.len-=1
    return

    function(List l) List:clear -> void does
        int idx = l.len-1
        while idx!=-1 do
            l:get_node(idx):free()
            idx-=1
        done
        l.len=0
    return

    function(List l) List:free -> void does
        free(l)
    return
endtype
