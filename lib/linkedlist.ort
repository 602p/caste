import std

type LinkedListNode is
    ptr value
    LinkedListNode next

    function(ptr value) LinkedListNode::new -> LinkedListNode does
        LinkedListNode new = malloc(@sizeof(LinkedListNode)@)|LinkedListNode
        new.value=value
        new.next=null|LinkedListNode
    return new

    function(LinkedListNode n) LinkedListNode:free -> void does
        free(n)
    return
endtype

type ListCacheBox is packed
    LinkedListNode node
endtype

type List is
    int len
    LinkedListNode head
    ptr cache
    bool cache_ready
    bool cache_alloced

    function() List::new -> List does
        List new = malloc(@sizeof(List)@)|List
        new.len=0
        new.cache_ready=false
        new.cache_alloced=false
        new.head=null|LinkedListNode
    return new

    function(List o) List::copy -> List does
        List new = List::new()
        int i=0
        while i<o.len do
            new:append(o:get(i))
            i+=1
        done
    return new

    function(List l) List:gen_cache -> void does
        if l.cache_alloced do
            free(l.cache)
        done
        int SOB=(@sizeof(ListCacheBox)@)
        l.cache_alloced=true
        l.cache_ready=true
        l.cache=malloc(SOB*(l.len+1))
        int idx = 0
        LinkedListNode current = l.head
        ListCacheBox box
        while idx<l.len do
            box=(l.cache|long+(SOB*idx)|long)|ptr|ListCacheBox
            box.node=current
            idx+=1
            if current.next|ptr!=null do
                current=current.next
            done
        done
    return

    function(List l, int want) List:get_node -> LinkedListNode does
        if -l.cache_ready do
            l:gen_cache()
        done
        if want>=l.len do
            shoc::bail_out("Requested List pos > than exists, "+want:str()+">"+l.len:str())
        done
    return ((l.cache|long+((@sizeof(ListCacheBox)@)*want)|long)|ptr|ListCacheBox).node

    function(List l, int want) List:get -> ptr does
    return l:get_node(want).value

    function(List l, ptr item) List:append -> void does
        LinkedListNode new = LinkedListNode::new(item)
        if l.len>0 do
            LinkedListNode last = l:get_node(l.len-1)
            last.next=new
        else do
            l.head=new
        done
        l.len+=1
        l.cache_ready=false
    return

    function(List l, int i, ptr item) List:insert -> void does
        if i==l.len do
            l:append(item)
            l.cache_ready=false
            return
        elif i>l.len do
            printf("Can't insert past end of list!\n")
            return
        done

        LinkedListNode new = LinkedListNode::new(item)

        if i==0 do
            if l.len!=0 do
                new.next=l.head
            done
            l.head=new
            l.len+=1
            l.cache_ready=false
            return
        done

        l.len+=1

        LinkedListNode prev = l:get_node(i-1)
        new.next=prev.next
        prev.next=new
        l.cache_ready=false
    return

    function(List l, int i) List:del -> void does
        if i>=l.len do
            printf("No such item\n")
            return
        done

        if i==0 do
            # printf("DELETING Head=%x\n", l.head.value)
            LinkedListNode old_head = l.head
            if l.len>1 do
                l.head=l.head.next
            done
            old_head:free()
            l.len-=1
            l.cache_ready=false
            return
        done

        LinkedListNode prev = l:get_node(i-1)
        prev.next:free()
        if i!=l.len-1 do
            prev.next=prev.next.next
        done
        l.len-=1
        l.cache_ready=false
    return

    function(List l) List:clear -> void does
        int idx = l.len-1
        while idx!=-1 do
            l:get_node(idx):free()
            idx-=1
        done
        l.len=0
        l.cache_ready=false
    return

    function(List l) List:free -> void does
        free(l)
    return
endtype
