@declare_c_func("fopen", "ptr", "(i8*, i8*)")@
@declare_c_func("fprintf", "void", "(...)")@
@declare_c_func("fclose", "void", "(i8*)")@
@declare_c_func("fflush", "void", "(i8*)")@
@declare_c_func("fgets", "ptr", "(i8*, i32, i8*)")@
import err

type File is
	cstr path
	cstr mode
	bool writable
	bool reached_eof
	bool closed
	ptr  _file

	function(cstr path, cstr mode) File::open -> File does
		File f = malloc(@sizeof(File)@)|File
		f.writable = mode:contains("w")
		f._file=fopen(path, mode)

		if f._file|ptr|int==0 do
			orth::fail("***FATAL fileio/File::open error, fopen->0***\n")
		done

		f.mode=mode
		f.path=path
		f.reached_eof=0|bool
		f.closed=0|bool
	return f

	function(cstr path) File::exists -> bool does
		ptr file=fopen(path, "r")
		if file==null do
			return false
		done
		fclose(file)
	return true

	function(File f) File:ready -> bool does
		if f.reached_eof==0|bool do
			return 1|bool
		done
	return f.writable

	function(File f) File:readline -> cstr does
		int BLOCK_SIZE=63

		cstr buf = malloc(BLOCK_SIZE)
		buf[0]=("\0")[0]
		int buf_sz = BLOCK_SIZE
		cstr new_buf
		int last_size=-1

		while buf:len()!=last_size do
			last_size=buf:len()
			fgets(buf:offset(buf:len()), BLOCK_SIZE, f._file)
			if buf:len()==0 do
				f.reached_eof=true
				return buf
			elif buf[buf:len()-1]==ord("\n")|byte do
				return buf
			else do
				buf_sz+=BLOCK_SIZE
				buf=realloc(buf, buf_sz)

				if buf|ptr|int==0 do
					printf("***FATAL fileio/File::readline error, realloc->0 for req_sz=%i***\n", buf_sz)
					exit(1)
				done
			done
		done

		f.reached_eof=1|bool
	return buf

	function(File f) File:readall -> cstr does
		cstr contents=f:readline()
		cstr new_contents
		while f:ready() do
			new_contents=contents+f:readline()
			contents:free()
			contents=new_contents
		done
	return contents

	function(File f, cstr s) File:write -> void does
		fprintf(f._file, "%s", s)
	return

	function(File f, cstr s) File:writeln -> void does
		fprintf(f._file, "%s\n", s)
	return

	function(File f) File:close -> void does
		if f.writable do
			fflush(f._file|ptr)
		done
		fclose(f._file|ptr)
		f.closed=1|bool
	return

	function(File f) File:free -> void does
		if f.closed==0|bool do
			f:close()
		done
		free(f|ptr)
	return
endtype