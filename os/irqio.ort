@declare_func("__kget_keyboard_handler_addr", "ptr", "()")@
@declare_func("__kget_pf_handler_addr", "ptr", "()")@
@declare_func("__kget_gpf_handler_addr", "ptr", "()")@
@declare_func("__kget_df_handler_addr", "ptr", "()")@
@declare_func("__kget_pic_handler_addr", "ptr", "()")@
@declare_func("__klidt", "void", "(i8*)")@
@declare_func("__kwritepb", "void", "(i8, i8)")@
@declare_func("__kreadpb", "ubyte", "(i8)")@
import mm

type IDTEntry is packed
	short offset_low
	short selector
	byte  zero
	byte  type
	short offset_high

	function(ptr irupt_handler) IDTEntry::new -> IDTEntry does
		int irupt_addr=irupt_handler|int
		IDTEntry entry = malloc(@sizeof(IDTEntry)@)|IDTEntry
		entry.offset_low=(irupt_addr & 0xFFFF)|short
		entry.selector=0x08|short
		entry.zero=0|byte
		entry.type=0x8E|byte
		entry.offset_high=((irupt_addr&0xFFFF0000) >> 16)|short
	return entry
endtype

type IDT is packed
	short idt_size
	int idt_address

	function() IDT::create -> IDT does
		IDT new = malloc(@sizeof(IDT)@)|IDT
		new.idt_size=(((@sizeof(IDTEntry)@)*256)-1)|short #Said -1
		new.idt_address=malloc((new.idt_size|int)+1)|int
		memset(new.idt_address|ptr, (new.idt_size|int)+1, 0|byte)
	return new

	function(IDT table, IDTEntry entry, int idx) IDT:install_entry -> void does
		int entry_sz=@sizeof(IDTEntry)@
		ptr target=(table.idt_address|ptr):offset(entry_sz*idx)
		memcpy(entry|ptr, target, entry_sz)
	return
endtype

function(int p, int d) write_port -> void does
	__kwritepb(p|byte, d|byte)
return

function(int p) read_port -> int does
return __kreadpb(p|byte)|int

IDT idt

function() setup_irq -> void does
	idt=IDT::create()

	kterm:print("IDT@")
	kterm:dumphexi(idt.idt_address)

	IDTEntry kbd_handler = IDTEntry::new(__kget_keyboard_handler_addr())
	IDTEntry pf_handler = IDTEntry::new(__kget_pf_handler_addr())
	IDTEntry gpf_handler = IDTEntry::new(__kget_gpf_handler_addr())
	IDTEntry df_handler = IDTEntry::new(__kget_df_handler_addr())
	IDTEntry pic_handler = IDTEntry::new(__kget_pic_handler_addr())

	idt:install_entry(kbd_handler, 0x21)
	kterm:print("#KBD")
	idt:install_entry(pic_handler, 0x20)
	kterm:print("#PIC")
	idt:install_entry(pf_handler, 0x0E)
	kterm:print("#PF")
	idt:install_entry(gpf_handler, 0x0D)
	kterm:print("#GPF")
	idt:install_entry(df_handler, 0x08)
	kterm:print("#DF")

	#Mask interrupts we don't have handlers for
	setup_kbd()
	setup_pit()

	__klidt(idt|ptr)

	start_irqs()
	kterm:print(" KBD, PIC started. ")
	read_port(0x60)
return

function() setup_kbd -> void does
	write_port(0x20 , 0x11)
	write_port(0xA0 , 0x11)
	write_port(0x21 , 0x20)
	write_port(0xA1 , 0x28)
	write_port(0x21 , 0x00)
	write_port(0xA1 , 0x00)
	write_port(0x21 , 0x01)
	write_port(0xA1 , 0x01)
	write_port(0x21 , 0xff)
	write_port(0xA1 , 0xff)
return

function() setup_pit -> void does
	write_port(0x43 , 0x36) #Square wave mode
	write_port(0x40, 0) #65536 ticks/sec, 54.9 ms
	write_port(0x40, 0) #65536 ticks/sec, 54.9 ms
return

type KeyboardEvent is
	int scancode
	bool state

	function(int scancode, bool state) KeyboardEvent::new -> KeyboardEvent does
		KeyboardEvent new = malloc(@sizeof(KeyboardEvent)@)|KeyboardEvent
		new.scancode=scancode
		new.state=state
	return new
endtype

type KeyboardConsumerCallback is a function->void

type KeyboardState is
	ptr button_state_map #bitmap of states (0=up, 1=down) for buttons (based on scancode)
	KeyboardConsumerCallback handler

	function() KeyboardState::new -> KeyboardState does
		KeyboardState new = malloc(@sizeof(KeyboardState)@)|KeyboardState
		new.button_state_map=malloc(128)
		memset(new.button_state_map, 128, 0|byte)
		new.handler=0|KeyboardConsumerCallback
	return new

	function(KeyboardState s, uint scancode) KeyboardState:getkey -> bool does
		if scancode>127 do
			ikpanici("Internal Error - Invalid Scancode in KeyboardState:getkey", scancode)
		done
	return s.button_state_map[scancode]!=0|byte

	function(KeyboardState s, uint scancode, bool state) KeyboardState:setkey -> void does
		if scancode>127 do
			ikpanici("Internal Error - Invalid Scancode in KeyboardState:setkey", scancode)
		done
		s.button_state_map[scancode]=state|byte

		if s.handler|int!=0 do
			s.handler(scancode, state)
		done
	return

	function(KeyboardState s, KeyboardConsumerCallback handler) KeyboardState:set_handler -> void does
		s.handler=handler
	return
endtype

KeyboardState system_kbdstate
long pic_ticks

function() start_irqs -> void does
	system_kbdstate=KeyboardState::new()
	pic_ticks=0|long
	write_port(0x21 , 0b11111100)
	#                         ^^- Enable IRQ0 (0x20 after translation) for PIT
	#                         |- Enable IRQ1 (0x21 after translation) for keyboard
return

function() __irq_keyboard_handler -> void does
	write_port(0x20, 0x20)
	int status = read_port(0x64)
	if (status&1) > 0 do
		int value = read_port(0x60)
		int keycode = value&0b01111111
		system_kbdstate:setkey(keycode, (value&0b10000000)==0)
	done
return

function(int addr, int errorcode) __irq_pagefault_handler -> void does
	kpanic(errorcode, addr, "Unrecoverable Page Fault Error - INT 0x0E - #PF", "???")
return

function(int addr, int errorcode) __irq_protectionfault_handler -> void does
	kpanic(errorcode, addr, "Unrecoverable Page Fault Error - INT 0x0D - #GPF", "???")
return

function(int addr, int errorcode) __irq_doublefault_handler -> void does
	kpanic(errorcode, addr, "Unrecoverable Double Fault Error - INT 0x08 - #DF", "???")
return

function() __irq_timer_handler -> void does
	pic_ticks+=1|long
	write_port(0x20, 0x20)
return