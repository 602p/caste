@declare_func("__kget_keyboard_handler_addr", "ptr", "()")@
@declare_func("__kget_pf_handler_addr", "ptr", "()")@
@declare_func("__kget_gpf_handler_addr", "ptr", "()")@
@declare_func("__kget_df_handler_addr", "ptr", "()")@
@declare_func("__klidt", "void", "(i8*)")@
@declare_func("__kwritepb", "void", "(i8, i8)")@
@declare_func("__kreadpb", "ubyte", "(i8)")@
import mm

type IDTEntry is packed
	short offset_low
	short selector
	byte  zero
	byte  type
	short offset_high

	function(ptr irupt_handler) IDTEntry::new -> IDTEntry does
		int irupt_addr=irupt_handler|int
		IDTEntry entry = malloc(@sizeof(IDTEntry)@)|IDTEntry
		entry.offset_low=(irupt_addr & 0xFFFF)|short
		entry.selector=0x08|short
		entry.zero=0|byte
		entry.type=0x8E|byte
		entry.offset_high=((irupt_addr&0xFFFF0000) >> 16)|short
	return entry
endtype

type IDT is packed
	short idt_size
	int idt_address

	function() IDT::create -> IDT does
		IDT new = malloc(@sizeof(IDT)@)|IDT
		new.idt_size=(((@sizeof(IDTEntry)@)*256)-1)|short #Said -1
		new.idt_address=malloc((new.idt_size|int)+1)|int
		memset(new.idt_address|ptr, (new.idt_size|int)+1, 0|byte)
	return new

	function(IDT table, IDTEntry entry, int idx) IDT:install_entry -> void does
		int entry_sz=@sizeof(IDTEntry)@
		ptr target=(table.idt_address|ptr):offset(entry_sz*idx)
		memcpy(entry|ptr, target, entry_sz)
	return
endtype

function(int p, int d) write_port -> void does
	__kwritepb(p|byte, d|byte)
return

function(int p) read_port -> int does
return __kreadpb(p|byte)|int

IDT idt

function() setup_irq -> void does
	kterm:print("*")
	idt=IDT::create()

	kterm:print("IDT@")
	kterm:printi(idt.idt_address)
	kterm:print(",")
	kterm:printi(idt.idt_size|int)

	kterm:print("*")
	IDTEntry kbd_handler = IDTEntry::new(__kget_keyboard_handler_addr())
	IDTEntry pf_handler = IDTEntry::new(__kget_pf_handler_addr())
	IDTEntry gpf_handler = IDTEntry::new(__kget_gpf_handler_addr())
	IDTEntry df_handler = IDTEntry::new(__kget_df_handler_addr())

	kterm:print("kbdh@")
	kterm:printi(__kget_keyboard_handler_addr()|int)
	kterm:print("*")
	idt:install_entry(kbd_handler, 0x21)
	idt:install_entry(pf_handler, 0x0E)
	idt:install_entry(gpf_handler, 0x0D)
	idt:install_entry(df_handler, 0x08)

	#Mask interrupts we don't have handlers for
	setup_kbd()

	kterm:print("!")
	__klidt(idt|ptr)
	kterm:print("*")

	start_kbd()
	read_port(0x60)

	kterm:print("#")
return

function() setup_kbd -> void does
	write_port(0x20 , 0x11)
	write_port(0xA0 , 0x11)
	write_port(0x21 , 0x20)
	write_port(0xA1 , 0x28)
	write_port(0x21 , 0x00)
	write_port(0xA1 , 0x00)
	write_port(0x21 , 0x01)
	write_port(0xA1 , 0x01)
	write_port(0x21 , 0xff)
	write_port(0xA1 , 0xff)
return

type KeyboardBuf is
	int waiting
	int bufsize
	ptr buffer
	ptr scratch

	function(int bufsize) KeyboardBuf::new -> KeyboardBuf does
		KeyboardBuf new = malloc(@sizeof(KeyboardBuf)@)|KeyboardBuf
		new.waiting=0
		new.bufsize=bufsize
		new.buffer=malloc(bufsize)
	return new

	function(KeyboardBuf b, byte char) KeyboardBuf:append -> void does
		b.buffer[b.waiting]=char
		b.buffer[b.waiting+1]=0|byte
		b.waiting+=1
	return

	function(KeyboardBuf b) KeyboardBuf:delete1 -> void does
		if b.waiting>0 do
			b.waiting-=1
			b.buffer[b.waiting]=0|byte
		done
	return

	function(KeyboardBuf b) KeyboardBuf:stringview -> cstr does
	return b.buffer|cstr
endtype

type KeyboardState is
	bool shifted
	KeyboardBuf buffer

	function(KeyboardBuf buf) KeyboardState::new -> KeyboardState does
		KeyboardState new = malloc(@sizeof(KeyboardState)@)|KeyboardState
		new.shifted=0|bool
		new.buffer=buf
	return new
endtype

KeyboardState system_kbdstate

function() start_kbd -> void does
	system_kbdstate=KeyboardState::new(KeyboardBuf::new(2048))
	write_port(0x21 , 0xFD)
return

function() __irq_keyboard_handler -> void does
	write_port(0x20, 0x20)
	int status = read_port(0x64)
	if (status&1) > 0 do
		int value = read_port(0x60)
		int keycode = value&0b01111111
		if (value&0b10000000) == 0 do #On keydown
			if keycode==42 do
				system_kbdstate.shifted=1|bool
			elif keycode==54 do
				system_kbdstate.shifted=1|bool
			elif keycode==14 do
				system_kbdstate.buffer:delete1()
			elif keycode==59 do
				(0|ptr)[0xDEADBEEF]=0|byte
			elif keycode==60 do
				int bad = 1/0
			else do
				system_kbdstate.buffer:append(translate_keycode(keycode, system_kbdstate.shifted))
			done
		else do
			if keycode==42 do
				system_kbdstate.shifted=0|bool
			elif keycode==54 do
				system_kbdstate.shifted=0|bool
			done
		done
	done
return

function(int addr, int errorcode) __irq_pagefault_handler -> void does
	kpanic(errorcode, addr, "Unrecoverable Page Fault Error - INT 0x0E - #PF", "???")
return

function(int addr, int errorcode) __irq_protectionfault_handler -> void does
	kpanic(errorcode, addr, "Unrecoverable Page Fault Error - INT 0x0D - #GPF", "???")
return

function(int addr, int errorcode) __irq_doublefault_handler -> void does
	kpanic(errorcode, addr, "Unrecoverable Double Fault Error - INT 0x08 - #DF", "???")
return